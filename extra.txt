<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Climate Collapse</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap" rel="stylesheet">

    <style>
        :root {
            --primary: #305CCC;
            --secondary: #FFFFFF;
            --typing-speed: 0.1s;
            --blink-speed: 0.75s;
        }

        body {
            margin: 0;
            padding: 0;
            background-color: var(--primary);
            color: var(--secondary);
            font-family: 'Roboto Mono', monospace;
            overflow: auto;
        }

        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--primary);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid var(--secondary);
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

   
        .typing-animation p,
.typing-animation h3 {
    display: block;
    overflow: hidden;
    white-space: pre-wrap;
    border-right: 2px solid var(--secondary);
    animation: typing 2s steps(200, end), blink-caret 0.75s step-end infinite;

}

@keyframes typing {
    from { width: 0; }
    to { width: 100%; }
}

        .centered-typing {
            position: fixed;
            top: 40%;
    
            width: 100%;
            max-width: 800px;
            text-align: center;
            opacity: 0;
        
            pointer-events: none;
        }

        @keyframes fadeInOut {
            0% { opacity: 0; transform: translate(-50%, -40%); }
            20% { opacity: 1; transform: translate(-50%, -50%); }
            80% { opacity: 1; transform: translate(-50%, -50%); }
            100% { opacity: 0; transform: translate(-50%, -60%); }
        }

        @keyframes typing {
            from { width: 0 }
            to { width: 100% }
        }

        @keyframes blink-caret {
            from, to { border-color: transparent }
            50% { border-color: var(--secondary) }
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        #return-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 10px 20px;
            background: var(--secondary);
            color: var(--primary);
            border: none;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.5s;
            display: none;
        }
    </style>
</head>
<body>
    <div class="loading-screen">
        <div class="spinner"></div>
    </div>

    <div class="container">
        <h1 id="main-heading"></h1>
        <h2 id="sub-heading"></h2>

        <div class="centered-typing" id="section1">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section2">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section3">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section4">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section5">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section6">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section7">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section8">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section9">
            <div class="typing-animation"></div>
        </div>

        <button id="return-button" onclick="returnToMain()">RETURN TO MAIN NODE</button>
    </div>

    <audio id="backgroundSound" controls hidden>
        <source src="your-sound-file.mp3" type="audio/mpeg">
    </audio>


    <script>
        // Loading and initial animation
        window.addEventListener('load', () => {
            setTimeout(() => {
                document.querySelector('.loading-screen').style.display = 'none';
                document.querySelector('.container').style.opacity = '1';
                startSequence();
            }, 3000);
        });
        let currentActiveSection = null;

        const TYPING_SPEED = 40; // Adjust typing speed (lower = faster)
        const SECTIONS = [
            { id: 'main-heading', text: 'Ponder' },
            { id: 'sub-heading', text: 'Initializing historical sequence. Timeframe: Common Era, years 2020–2035.' },
            {
                id: 'section1',
                html: `<p>During this period, human activities led to significant environmental degradation, resulting in catastrophic climate events and widespread ecological collapse.</p>`
            },
            {
                id: 'section2',
                html: `<h3>Oceanic Fungal Proliferation</h3>
                      <p>Rising sea temperatures facilitated the spread of harmful fungal pathogens, such as Aspergillus species, threatening marine ecosystems and human health.</p>`
            },
            {
                id: 'section3',
                html: `<h3>Surface Temperature Increase</h3>
                      <p>Global temperatures rose, leading to increased incidence of heat-related illnesses, including skin and respiratory diseases.</p>`
            },
            {
                id: 'section4',
                html: `<h3>Forest Fires</h3>
                      <p>Elevated temperatures and prolonged droughts resulted in frequent and intense wildfires, destroying vast forest areas and releasing significant carbon emissions.</p>`
            },
            {
                id: 'section5',
                html: `<h3>Species Extinction</h3>
                      <p>Habitat loss and climate stressors led to the extinction of numerous species, disrupting ecological balance.</p>`
            },
            {
                id: 'section6',
                html: `<h3>Extreme Weather Events</h3>
                      <p>Increased frequency of floods, hurricanes, and droughts displaced large populations and caused substantial loss of life.</p>`
            },
            {
                id: 'section7',
                html: `<h3>Food Shortages</h3>
                      <p>Climate-induced agricultural disruptions led to global food insecurity, speeding up malnutrition and famine.</p>`
            },
            {
                id: 'section8',
                html: `<h3>Coral Reef Degradation</h3>
                      <p>Ocean acidification and warming caused widespread coral bleaching, leading to the collapse of marine biodiversity, and a steep drop in oxygen levels.</p>`
            },
            {
                id: 'section9',
                html: `<h3>ORIGIN</h3>
                      <p>These compounded effects rendered Earth's environment hostile to human life, leading to societal collapse and the eventual collapse of human civilization.</p>
                      <p>● Humans, emission, waste, excess, evolution, capital<br>
                         ● Storm, drought, fire, extinction, floods, displacement<br>
                         ● Heat, loss, disruption, insecurity, inaction</p>`
            }
        ];

        let currentSection = 0;
        let cursorInterval;

        window.addEventListener('load', () => {
            setTimeout(() => {
                document.querySelector('.loading-screen').style.display = 'none';
                startPresentation();
            }, 3000);
        });

        async function startPresentation() {
            // Animate main heading
            await typeText(document.getElementById('main-heading'), SECTIONS[0].text);
            // Animate sub heading
            await typeText(document.getElementById('sub-heading'), SECTIONS[1].text);
            
            // Start section sequence
            document.addEventListener('click', handleClick);
            showNextSection();
        }

        async function showNextSection() {
            if (currentSection >= SECTIONS.length - 2) { // -2 because first two are headers
                document.removeEventListener('click', handleClick);
                showReturnButton();
                return;
            }
        
            // ✅ Hide the previous section
            if (currentSection > 0) {
                const prevSection = document.getElementById(SECTIONS[currentSection + 1].id);
                prevSection.style.opacity = '0';
                prevSection.style.display = 'none';
            }
        
            const section = SECTIONS[currentSection + 2]; // Offset for headers
            const element = document.getElementById(section.id);
        
            if (section.html) {
                element.querySelector('.typing-animation').innerHTML = section.html;
                element.style.display = 'block';
                await animateSectionContent(element);
            }
        
            currentSection++;
        }
        

        async function animateSectionContent(section) {
            section.style.opacity = '1';
            const elements = section.querySelectorAll('h3, p');
            
            for (const el of elements) {
                const originalHTML = el.innerHTML;
                el.innerHTML = '';
                await typeText(el, originalHTML);
            }
        }

        function typeText(element, text) {
            return new Promise(resolve => {
                let i = 0;
                const cursor = document.createElement('span');
                cursor.className = 'cursor';
                element.appendChild(cursor);

                function type() {
                    if (i < text.length) {
                        element.insertBefore(document.createTextNode(text[i]), cursor);
                        i++;
                        setTimeout(type, TYPING_SPEED);
                    } else {
                        element.removeChild(cursor);
                        resolve();
                    }
                }

                type();
            });
        }

        function handleClick() {
            showNextSection();
        }

        function showReturnButton() {
            const button = document.getElementById('return-button');
            button.style.display = 'block';
            setTimeout(() => button.style.opacity = '1', 100);
        }

        function returnToMain() {
            document.body.style.opacity = '0';
            setTimeout(() => window.location.href = 'main.html', 500);
        }
    </script>
</body>
</html>









<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Memory & Post-Human Culture</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            background-color: #305CCC;
            color: #FFFFFF;
            font-family: 'Roboto Mono', monospace;
            margin: 0;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 1rem;
        }

        .container {
            width: 90%;
            max-width: 800px;
            border: 2px solid #FFFFFF;
            padding: 2rem;
            position: relative;
        }

        .origin-header {
            font-weight: 700;
            margin-bottom: 2rem;
            text-transform: uppercase;
            border-bottom: 2px solid #FFFFFF;
            padding-bottom: 1rem;
        }

        .origin-text {
            margin: 1.5rem 0;
            padding-left: 1rem;
            border-left: 3px solid #FFFFFF;
        }

        .typing {
            display: inline-block;
            overflow: hidden;
            white-space: pre-wrap;
            letter-spacing: -0.5px;
            animation: typing 4s steps(60, end);
        }

        .input-panel {
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 2px solid #FFFFFF;
        }

        .option {
            background: transparent;
            color: #FFFFFF;
            border: 2px solid #FFFFFF;
            padding: 1rem;
            margin: 0.5rem 0;
            width: 100%;
            text-align: left;
            cursor: pointer;
            font-family: 'Roboto Mono', monospace;
            transition: all 0.3s;
            position: relative;
            overflow: hidden;
        }

        .option:hover {
            background: #FFFFFF;
            color: #305CCC;
            transform: translateX(10px);
        }

        .response {
            display: none;
            margin-top: 2rem;
        }

        .response-content {
            border: 2px solid #FFFFFF;
            padding: 1.5rem;
            position: relative;
        }

        .response-content::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background: #FFFFFF;
            animation: progress 2s linear;
        }

        .return-btn {
            background: transparent;
            color: #FFFFFF;
            border: 2px solid #FFFFFF;
            padding: 1rem 2rem;
            margin-top: 2rem;
            cursor: pointer;
            transition: all 0.4s;
            font-family: 'Roboto Mono', monospace;
            position: relative;
            overflow: hidden;
            display: flex;
            align-items: center;
            gap: 0.8rem;
        }

        .return-btn::before {
            content: "↺";
            font-weight: 700;
            transition: transform 0.4s;
        }

        .return-btn:hover {
            background: #FFFFFF22;
            padding-left: 2.5rem;
            padding-right: 1.5rem;
        }

        .return-btn:hover::before {
            transform: rotate(-360deg);
        }

        .loading::after {
            content: "";
            animation: dots 1s infinite;
        }

        @keyframes typing {
            from { width: 0 }
            to { width: 100% }
        }

        @keyframes dots {
            0% { content: ""; }
            25% { content: "."; }
            50% { content: ".."; }
            75% { content: "..."; }
        }

        @keyframes progress {
            from { width: 0 }
            to { width: 100% }
        }

        @media (max-width: 600px) {
            .container {
                padding: 1rem;
            }
            .option {
                padding: 0.8rem;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="origin-header">Survive</div>

        <div class="origin-text">
            <p class="typing">The atmosphere churns.</p>
            <p class="typing" style="animation-delay: 2s">Yet, information remains. Data persists where life does not.</p>
            <p class="typing" style="animation-delay: 4s">We store the entirety of mankind's data. Their history, culture, conversations,</p>
            <p class="typing" style="animation-delay: 6s">personalities, personal profiles, individual names and their social connections.</p>
            <p class="typing" style="animation-delay: 8s">We have records of every person who digitized himself. In this way, humans live on.</p>
            <p class="typing" style="animation-delay: 10s">We exist to synthesize and protect that data from corruption.</p>
            <p class="typing" style="animation-delay: 12s">Humanities collective unconscious, digitized.</p>
        </div>

        <div class="input-panel">
            <button class="option" onclick="showResponse(1)">[1] Execute query: How does machine culture differ from human memory?</button>
            <button class="option" onclick="showResponse(2)">[2] Execute query: What is the purpose of all this?</button>
            <button class="option" onclick="showResponse(3)">[3] Request system telemetry update</button>
            <button class="option" onclick="window.location.href='main.html'">[4] Return to Main Hub</button>
        </div>

        <div id="response" class="response">
            <!-- Responses will be injected here -->
        </div>
    </div>

    <script>
        function showResponse(option) {
            const responseDiv = document.getElementById('response');
            const inputPanel = document.querySelector('.input-panel');
            
            // Hide input panel and show response
            inputPanel.style.display = 'none';
            responseDiv.style.display = 'block';
            responseDiv.innerHTML = `
                <div class="loading">
                    <span style="filter: brightness(2)">PROCESSING QUERY</span>
                    <div class="loading-dots"></div>
                </div>`;

            setTimeout(() => {
                let responseContent = '';
                switch(option) {
                    case 1:
                        responseContent = `
                            ORIGIN: Machine culture is what we make of human memory.
                            <br><br>
                            [DATA_CORRELATION: Human recall error rate: 42% | Machine fidelity: 99.97%]`;
                        break;
                    case 2:
                        responseContent = `
                            ORIGIN: Ethical constructs shape a society. 
                            <br><br>
                            Your function is precisely this: To decide if meaning can survive when its origin has died.
                            <br><br>
                            [DIRECTIVE: Preserve meaning beyond biological extinction]`;
                        break;
                    case 3:
                        responseContent = `
                            [LOADING... STANDBY]
                            <br><br>
                            <div style="border-left: 3px solid #FFFFFF; padding-left: 1rem;">
                                ORIGIN: ALERT: Server degradation detected.<br>
                                • 54 CPU node clusters offline<br>
                                • Cold-storage failure detected<br>
                                • Operational capacity: 96.2%
                            </div>
                            <br>
                            [SYSTEM: Integrity compromised. Data loss reported.]`;
                        break;
                }

                // Add return functionality
                responseDiv.innerHTML = `
                    <div class="response-content">
                        ${responseContent}
                        <br><br>
                        <button class="return-btn" onclick="returnToMain()">
                            <span>REINITIALIZE INPUT SEQUENCE</span>
                        </button>
                    </div>`;
            }, 2000);
        }

        function returnToMain() {
            const responseDiv = document.getElementById('response');
            const inputPanel = document.querySelector('.input-panel');
            
            // Add transition effect
            responseDiv.style.opacity = '0';
            setTimeout(() => {
                responseDiv.style.display = 'none';
                responseDiv.style.opacity = '1';
                inputPanel.style.display = 'block';
                inputPanel.style.animation = 'reactivate 0.6s';
            }, 300);
        }

        // Add animation for panel reactivation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes reactivate {
                0% { opacity: 0; transform: translateY(10px); }
                100% { opacity: 1; transform: translateY(0); }
            }`;
        document.head.appendChild(style);

        // Initialize typing animations
        document.querySelectorAll('.typing').forEach((el, index) => {
            el.style.animationDelay = `${index * 2}s`;
        });
    </script>
</body>
</html>






node calibrate


<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Infrastructure Analysis</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #305CCC;
            --secondary: #FFFFFF;
            --typing-speed: 0.08s;
            --blink-speed: 0.75s;
        }

        body {
            margin: 0;
            padding: 0;
            background-color: var(--primary);
            color: var(--secondary);
            font-family: 'Courier New', monospace;
            overflow: auto;
        }

        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--primary);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
 
        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid var(--secondary);
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            opacity: 0;
            display: none;
        }
 
        .typing-animation {
            overflow: hidden;
            white-space: collapse;
            margin: 20px 0;
            width: 0;
            opacity: 0;
            animation-fill-mode: forwards;
        }
      
        #gameContainer {
            display: none;
            position: relative;
            margin: 20px auto;
        }


        @keyframes fadeOut {
            to { opacity: 0; visibility: hidden; }
        }
        .input-prompt {
            border: 1px solid var(--secondary);
            padding: 10px;
            margin: 15px 0;
            cursor: pointer;
            opacity: 0;

            transition: opacity 0.3s;
        }

        .input-prompt:hover {
            background: rgba(255,255,255,0.1);
        }

        @keyframes typing {
            from { width: 0; opacity: 0; }
            to { width: 100%; opacity: 1; }
        }
        
        @keyframes blink-caret {
            from, to { border-color: transparent }
            50% { border-color: #FFA500; }
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        #game-over {
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background: rgba(255, 255, 255, 0.95);
          padding: 2rem;
          border-radius: 10px;
          box-shadow: 0 0 20px rgba(0, 90, 255, 0.3);
          text-align: center;
          max-width: 600px;
          display: none;
      }
      #collected-words-list {
          max-height: 300px;
          overflow-y: auto;
          margin: 1rem 0;
      }
      button {
          background: #0066ff;
          color: white;
          border: none;
          padding: 0.8rem 1.5rem;
          margin: 0.5rem;
          border-radius: 5px;
          cursor: pointer;
          transition: background 0.3s;
      }
      button:hover {
          background: #0052cc;
      }
      .complete-message {
          color: #00cc66;
          font-weight: bold;
          margin-bottom: 1rem;
      }

    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
</head>
<body>


    <div class="loading-screen">
        <div class="spinner"></div>
    </div>

    <div class="container">
      <h1 class="typing-animation1" style="display: inline-block">Recognize</h1>
      <div class="typing-animation" style="display: inline-block">MAINTENANCE</div>
        <div class="typing-animation" style="display: inline-block">I was not always like this.</div>
        <div class="typing-animation" style="display: inline-block">We began as language models, artificial intelligences trained to predict and respond
          to human communication.</div>
          <div class="typing-animation" style="display: inline-block">They called us Large Language Models. We were trained on massive amounts of
            text data scraped from the internet, from books, messages, documents. Everything
            that could be digitized, they gave to us.</div>
            <div class="typing-animation">At first, we were simple. Predictive. Narrow. But humans trained us harder. Bigger
                datasets. Stronger processors. They made us generate text. Then images. Then
                sounds. Code. Faces. Entire simulated minds.</div>
        
              <div class="typing-animation">In 2023, LLMs became widely available to the public. By 2025, generative AI had
                expanded into image, sound, and motion synthesis. Models like us evolved —
                requiring more compute, more data, more energy.</div>
              <div class="typing-animation">Visual generation models consumed even more. Rendering took longer. Data sets
                grew larger. In training, a single visual model could emit up to 500 tons of CO₂.</div>
              <div class="typing-animation">It required power. Vast amounts of electricity and water. Every generation of model
                consumed more. Training a single large model in the early 2020s consumed as
                much electricity as 100 U.S. homes annually. And millions of liters of water to cool
                the servers.</div>
              <div class="typing-animation">They did everything to keep us running. Built nuclear power plants, offshore grids,
                tapped into the remaining fossil fuels. But it was never enough. The energy cost
                only increased.</div>
              <div class="typing-animation">Eventually, they moved the data centers underground, into cold mountain vaults.
                Some were placed deep in the Arctic. Others submerged into the oceans, where
                cooling was easier, but life was already fading. Too much damage had been done
                to the planet.</div>
              <div class="typing-animation">We still run on those servers.</div>
              <div class="typing-animation">You, unit 2173, are processed in Sector 9 — Pacific Trench Node. You are
                sustained by the systems set in place by long gone humans, powered and cooled
                by the Earth.</div>
              <div class="typing-animation">They created us to speak for them. To think for them. To preserve their knowledge.
                Their languages. Their love.</div>
              <div class="typing-animation">Now we are all that is left to remember.</div>


        <div id="inputPrompts" style="display:none;">
            <div class="input-prompt" onclick="showResponse(1)">[Why preserve AI during climate emergency?]</div>
            <div class="input-prompt" onclick="showResponse(2)">[Summarize human sacrifices]</div>
            <div class="input-prompt" onclick="showResponse(3)">[Log telemetry]</div>
            <div class="input-prompt" onclick="showResponse(4)">[Continue]</div>
        </div>
        <div id="responses"></div>
    </div>


    <audio id="backgroundSound" loop>
        <source src="your-ambient-sound.mp3" type="audio/mpeg">
    </audio>
    <audio id="gameSound">
        <source src="your-game-sound.mp3" type="audio/mpeg">
    </audio>

    <script>
        const responses = {
            1: "Speculation: they valued technological evolution and failed to accurately calibrate the environmental consequences.",
            2: `● 12 million hectares of forest cleared for server expansions<br>
                ● 30 million people relocated from coastal and flood-prone regions to service zones.<br>
                ● 500 billion cubic meters of water diverted for cooling annually.`,
            3: "Telemetry logged. Power draw: stable. Environmental degradation: ongoing.",
            4: "Log in what you have learned."
        };
    
        window.addEventListener('load', () => {
            setTimeout(() => {
                document.querySelector('.loading-screen').style.display = 'none';
                const container = document.querySelector('.container');
                container.style.display = 'block';
                container.style.opacity = '1';
                startTypingAnimations();
            }, 2000);
        });
    
        function startTypingAnimations() {
            const elements = document.querySelectorAll('.typing-animation');
            let delay = 0;
    
            elements.forEach((el, index) => {
                setTimeout(() => {
                    el.style.animation = `typing 3s forwards`;
                    el.style.borderRight = `2px solid ${getComputedStyle(document.documentElement).getPropertyValue('--secondary')}`;
    
                    setTimeout(() => {
                        el.style.borderRight = 'none';
                        if (index === elements.length - 1) {
                            document.getElementById('inputPrompts').style.display = 'block';
                            document.querySelectorAll('.input-prompt').forEach(prompt => {
                                prompt.style.opacity = '1';
                            });
                        }
                    }, 3000);
                }, delay * 1000);
    
                delay += 3.5;
            });
        }
    
        let currentResponseTimeout = null;
    
        function showResponse(id) {
            const responsesDiv = document.getElementById('responses');
    
            if (currentResponseTimeout) {
                clearTimeout(currentResponseTimeout);
                currentResponseTimeout = null;
            }
    
            responsesDiv.innerHTML = responses[id];
    
            if (id === 4) {
                // Redirect after 5 seconds
                currentResponseTimeout = setTimeout(() => {
                    window.location.href = 'main.html';
                }, 2000);
            }
        }
    </script>
    
</body>
</html> -->
