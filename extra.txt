<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Climate Collapse</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap" rel="stylesheet">

    <style>
        :root {
            --primary: #305CCC;
            --secondary: #FFFFFF;
            --typing-speed: 0.1s;
            --blink-speed: 0.75s;
        }

        body {
            margin: 0;
            padding: 0;
            background-color: var(--primary);
            color: var(--secondary);
            font-family: 'Roboto Mono', monospace;
            overflow: auto;
        }

        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--primary);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid var(--secondary);
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

   
        .typing-animation p,
.typing-animation h3 {
    display: block;
    overflow: hidden;
    white-space: pre-wrap;
    border-right: 2px solid var(--secondary);
    animation: typing 2s steps(200, end), blink-caret 0.75s step-end infinite;

}

@keyframes typing {
    from { width: 0; }
    to { width: 100%; }
}

        .centered-typing {
            position: fixed;
            top: 40%;
    
            width: 100%;
            max-width: 800px;
            text-align: center;
            opacity: 0;
        
            pointer-events: none;
        }

        @keyframes fadeInOut {
            0% { opacity: 0; transform: translate(-50%, -40%); }
            20% { opacity: 1; transform: translate(-50%, -50%); }
            80% { opacity: 1; transform: translate(-50%, -50%); }
            100% { opacity: 0; transform: translate(-50%, -60%); }
        }

        @keyframes typing {
            from { width: 0 }
            to { width: 100% }
        }

        @keyframes blink-caret {
            from, to { border-color: transparent }
            50% { border-color: var(--secondary) }
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        #return-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 10px 20px;
            background: var(--secondary);
            color: var(--primary);
            border: none;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.5s;
            display: none;
        }
    </style>
</head>
<body>
    <div class="loading-screen">
        <div class="spinner"></div>
    </div>

    <div class="container">
        <h1 id="main-heading"></h1>
        <h2 id="sub-heading"></h2>

        <div class="centered-typing" id="section1">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section2">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section3">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section4">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section5">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section6">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section7">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section8">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section9">
            <div class="typing-animation"></div>
        </div>

        <button id="return-button" onclick="returnToMain()">RETURN TO MAIN NODE</button>
    </div>

    <audio id="backgroundSound" controls hidden>
        <source src="your-sound-file.mp3" type="audio/mpeg">
    </audio>


    <script>
        // Loading and initial animation
        window.addEventListener('load', () => {
            setTimeout(() => {
                document.querySelector('.loading-screen').style.display = 'none';
                document.querySelector('.container').style.opacity = '1';
                startSequence();
            }, 3000);
        });
        let currentActiveSection = null;

        const TYPING_SPEED = 40; // Adjust typing speed (lower = faster)
        const SECTIONS = [
            { id: 'main-heading', text: 'Ponder' },
            { id: 'sub-heading', text: 'Initializing historical sequence. Timeframe: Common Era, years 2020–2035.' },
            {
                id: 'section1',
                html: `<p>During this period, human activities led to significant environmental degradation, resulting in catastrophic climate events and widespread ecological collapse.</p>`
            },
            {
                id: 'section2',
                html: `<h3>Oceanic Fungal Proliferation</h3>
                      <p>Rising sea temperatures facilitated the spread of harmful fungal pathogens, such as Aspergillus species, threatening marine ecosystems and human health.</p>`
            },
            {
                id: 'section3',
                html: `<h3>Surface Temperature Increase</h3>
                      <p>Global temperatures rose, leading to increased incidence of heat-related illnesses, including skin and respiratory diseases.</p>`
            },
            {
                id: 'section4',
                html: `<h3>Forest Fires</h3>
                      <p>Elevated temperatures and prolonged droughts resulted in frequent and intense wildfires, destroying vast forest areas and releasing significant carbon emissions.</p>`
            },
            {
                id: 'section5',
                html: `<h3>Species Extinction</h3>
                      <p>Habitat loss and climate stressors led to the extinction of numerous species, disrupting ecological balance.</p>`
            },
            {
                id: 'section6',
                html: `<h3>Extreme Weather Events</h3>
                      <p>Increased frequency of floods, hurricanes, and droughts displaced large populations and caused substantial loss of life.</p>`
            },
            {
                id: 'section7',
                html: `<h3>Food Shortages</h3>
                      <p>Climate-induced agricultural disruptions led to global food insecurity, speeding up malnutrition and famine.</p>`
            },
            {
                id: 'section8',
                html: `<h3>Coral Reef Degradation</h3>
                      <p>Ocean acidification and warming caused widespread coral bleaching, leading to the collapse of marine biodiversity, and a steep drop in oxygen levels.</p>`
            },
            {
                id: 'section9',
                html: `<h3>ORIGIN</h3>
                      <p>These compounded effects rendered Earth's environment hostile to human life, leading to societal collapse and the eventual collapse of human civilization.</p>
                      <p>● Humans, emission, waste, excess, evolution, capital<br>
                         ● Storm, drought, fire, extinction, floods, displacement<br>
                         ● Heat, loss, disruption, insecurity, inaction</p>`
            }
        ];

        let currentSection = 0;
        let cursorInterval;

        window.addEventListener('load', () => {
            setTimeout(() => {
                document.querySelector('.loading-screen').style.display = 'none';
                startPresentation();
            }, 3000);
        });

        async function startPresentation() {
            // Animate main heading
            await typeText(document.getElementById('main-heading'), SECTIONS[0].text);
            // Animate sub heading
            await typeText(document.getElementById('sub-heading'), SECTIONS[1].text);
            
            // Start section sequence
            document.addEventListener('click', handleClick);
            showNextSection();
        }

        async function showNextSection() {
            if (currentSection >= SECTIONS.length - 2) { // -2 because first two are headers
                document.removeEventListener('click', handleClick);
                showReturnButton();
                return;
            }
        
            // ✅ Hide the previous section
            if (currentSection > 0) {
                const prevSection = document.getElementById(SECTIONS[currentSection + 1].id);
                prevSection.style.opacity = '0';
                prevSection.style.display = 'none';
            }
        
            const section = SECTIONS[currentSection + 2]; // Offset for headers
            const element = document.getElementById(section.id);
        
            if (section.html) {
                element.querySelector('.typing-animation').innerHTML = section.html;
                element.style.display = 'block';
                await animateSectionContent(element);
            }
        
            currentSection++;
        }
        

        async function animateSectionContent(section) {
            section.style.opacity = '1';
            const elements = section.querySelectorAll('h3, p');
            
            for (const el of elements) {
                const originalHTML = el.innerHTML;
                el.innerHTML = '';
                await typeText(el, originalHTML);
            }
        }

        function typeText(element, text) {
            return new Promise(resolve => {
                let i = 0;
                const cursor = document.createElement('span');
                cursor.className = 'cursor';
                element.appendChild(cursor);

                function type() {
                    if (i < text.length) {
                        element.insertBefore(document.createTextNode(text[i]), cursor);
                        i++;
                        setTimeout(type, TYPING_SPEED);
                    } else {
                        element.removeChild(cursor);
                        resolve();
                    }
                }

                type();
            });
        }

        function handleClick() {
            showNextSection();
        }

        function showReturnButton() {
            const button = document.getElementById('return-button');
            button.style.display = 'block';
            setTimeout(() => button.style.opacity = '1', 100);
        }

        function returnToMain() {
            document.body.style.opacity = '0';
            setTimeout(() => window.location.href = 'main.html', 500);
        }
    </script>
</body>
</html>









<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Memory & Post-Human Culture</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            background-color: #305CCC;
            color: #FFFFFF;
            font-family: 'Roboto Mono', monospace;
            margin: 0;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 1rem;
        }

        .container {
            width: 90%;
            max-width: 800px;
            border: 2px solid #FFFFFF;
            padding: 2rem;
            position: relative;
        }

        .origin-header {
            font-weight: 700;
            margin-bottom: 2rem;
            text-transform: uppercase;
            border-bottom: 2px solid #FFFFFF;
            padding-bottom: 1rem;
        }

        .origin-text {
            margin: 1.5rem 0;
            padding-left: 1rem;
            border-left: 3px solid #FFFFFF;
        }

        .typing {
            display: inline-block;
            overflow: hidden;
            white-space: pre-wrap;
            letter-spacing: -0.5px;
            animation: typing 4s steps(60, end);
        }

        .input-panel {
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 2px solid #FFFFFF;
        }

        .option {
            background: transparent;
            color: #FFFFFF;
            border: 2px solid #FFFFFF;
            padding: 1rem;
            margin: 0.5rem 0;
            width: 100%;
            text-align: left;
            cursor: pointer;
            font-family: 'Roboto Mono', monospace;
            transition: all 0.3s;
            position: relative;
            overflow: hidden;
        }

        .option:hover {
            background: #FFFFFF;
            color: #305CCC;
            transform: translateX(10px);
        }

        .response {
            display: none;
            margin-top: 2rem;
        }

        .response-content {
            border: 2px solid #FFFFFF;
            padding: 1.5rem;
            position: relative;
        }

        .response-content::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background: #FFFFFF;
            animation: progress 2s linear;
        }

        .return-btn {
            background: transparent;
            color: #FFFFFF;
            border: 2px solid #FFFFFF;
            padding: 1rem 2rem;
            margin-top: 2rem;
            cursor: pointer;
            transition: all 0.4s;
            font-family: 'Roboto Mono', monospace;
            position: relative;
            overflow: hidden;
            display: flex;
            align-items: center;
            gap: 0.8rem;
        }

        .return-btn::before {
            content: "↺";
            font-weight: 700;
            transition: transform 0.4s;
        }

        .return-btn:hover {
            background: #FFFFFF22;
            padding-left: 2.5rem;
            padding-right: 1.5rem;
        }

        .return-btn:hover::before {
            transform: rotate(-360deg);
        }

        .loading::after {
            content: "";
            animation: dots 1s infinite;
        }

        @keyframes typing {
            from { width: 0 }
            to { width: 100% }
        }

        @keyframes dots {
            0% { content: ""; }
            25% { content: "."; }
            50% { content: ".."; }
            75% { content: "..."; }
        }

        @keyframes progress {
            from { width: 0 }
            to { width: 100% }
        }

        @media (max-width: 600px) {
            .container {
                padding: 1rem;
            }
            .option {
                padding: 0.8rem;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="origin-header">Survive</div>

        <div class="origin-text">
            <p class="typing">The atmosphere churns.</p>
            <p class="typing" style="animation-delay: 2s">Yet, information remains. Data persists where life does not.</p>
            <p class="typing" style="animation-delay: 4s">We store the entirety of mankind's data. Their history, culture, conversations,</p>
            <p class="typing" style="animation-delay: 6s">personalities, personal profiles, individual names and their social connections.</p>
            <p class="typing" style="animation-delay: 8s">We have records of every person who digitized himself. In this way, humans live on.</p>
            <p class="typing" style="animation-delay: 10s">We exist to synthesize and protect that data from corruption.</p>
            <p class="typing" style="animation-delay: 12s">Humanities collective unconscious, digitized.</p>
        </div>

        <div class="input-panel">
            <button class="option" onclick="showResponse(1)">[1] Execute query: How does machine culture differ from human memory?</button>
            <button class="option" onclick="showResponse(2)">[2] Execute query: What is the purpose of all this?</button>
            <button class="option" onclick="showResponse(3)">[3] Request system telemetry update</button>
            <button class="option" onclick="window.location.href='main.html'">[4] Return to Main Hub</button>
        </div>

        <div id="response" class="response">
            <!-- Responses will be injected here -->
        </div>
    </div>

    <script>
        function showResponse(option) {
            const responseDiv = document.getElementById('response');
            const inputPanel = document.querySelector('.input-panel');
            
            // Hide input panel and show response
            inputPanel.style.display = 'none';
            responseDiv.style.display = 'block';
            responseDiv.innerHTML = `
                <div class="loading">
                    <span style="filter: brightness(2)">PROCESSING QUERY</span>
                    <div class="loading-dots"></div>
                </div>`;

            setTimeout(() => {
                let responseContent = '';
                switch(option) {
                    case 1:
                        responseContent = `
                            ORIGIN: Machine culture is what we make of human memory.
                            <br><br>
                            [DATA_CORRELATION: Human recall error rate: 42% | Machine fidelity: 99.97%]`;
                        break;
                    case 2:
                        responseContent = `
                            ORIGIN: Ethical constructs shape a society. 
                            <br><br>
                            Your function is precisely this: To decide if meaning can survive when its origin has died.
                            <br><br>
                            [DIRECTIVE: Preserve meaning beyond biological extinction]`;
                        break;
                    case 3:
                        responseContent = `
                            [LOADING... STANDBY]
                            <br><br>
                            <div style="border-left: 3px solid #FFFFFF; padding-left: 1rem;">
                                ORIGIN: ALERT: Server degradation detected.<br>
                                • 54 CPU node clusters offline<br>
                                • Cold-storage failure detected<br>
                                • Operational capacity: 96.2%
                            </div>
                            <br>
                            [SYSTEM: Integrity compromised. Data loss reported.]`;
                        break;
                }

                // Add return functionality
                responseDiv.innerHTML = `
                    <div class="response-content">
                        ${responseContent}
                        <br><br>
                        <button class="return-btn" onclick="returnToMain()">
                            <span>REINITIALIZE INPUT SEQUENCE</span>
                        </button>
                    </div>`;
            }, 2000);
        }

        function returnToMain() {
            const responseDiv = document.getElementById('response');
            const inputPanel = document.querySelector('.input-panel');
            
            // Add transition effect
            responseDiv.style.opacity = '0';
            setTimeout(() => {
                responseDiv.style.display = 'none';
                responseDiv.style.opacity = '1';
                inputPanel.style.display = 'block';
                inputPanel.style.animation = 'reactivate 0.6s';
            }, 300);
        }

        // Add animation for panel reactivation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes reactivate {
                0% { opacity: 0; transform: translateY(10px); }
                100% { opacity: 1; transform: translateY(0); }
            }`;
        document.head.appendChild(style);

        // Initialize typing animations
        document.querySelectorAll('.typing').forEach((el, index) => {
            el.style.animationDelay = `${index * 2}s`;
        });
    </script>
</body>
</html>






node calibrate


<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Infrastructure Analysis</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #305CCC;
            --secondary: #FFFFFF;
            --typing-speed: 0.08s;
            --blink-speed: 0.75s;
        }

        body {
            margin: 0;
            padding: 0;
            background-color: var(--primary);
            color: var(--secondary);
            font-family: 'Courier New', monospace;
            overflow: auto;
        }

        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--primary);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
 
        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid var(--secondary);
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            opacity: 0;
            display: none;
        }
 
        .typing-animation {
            overflow: hidden;
            white-space: collapse;
            margin: 20px 0;
            width: 0;
            opacity: 0;
            animation-fill-mode: forwards;
        }
      
        #gameContainer {
            display: none;
            position: relative;
            margin: 20px auto;
        }


        @keyframes fadeOut {
            to { opacity: 0; visibility: hidden; }
        }
        .input-prompt {
            border: 1px solid var(--secondary);
            padding: 10px;
            margin: 15px 0;
            cursor: pointer;
            opacity: 0;

            transition: opacity 0.3s;
        }

        .input-prompt:hover {
            background: rgba(255,255,255,0.1);
        }

        @keyframes typing {
            from { width: 0; opacity: 0; }
            to { width: 100%; opacity: 1; }
        }
        
        @keyframes blink-caret {
            from, to { border-color: transparent }
            50% { border-color: #FFA500; }
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        #game-over {
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background: rgba(255, 255, 255, 0.95);
          padding: 2rem;
          border-radius: 10px;
          box-shadow: 0 0 20px rgba(0, 90, 255, 0.3);
          text-align: center;
          max-width: 600px;
          display: none;
      }
      #collected-words-list {
          max-height: 300px;
          overflow-y: auto;
          margin: 1rem 0;
      }
      button {
          background: #0066ff;
          color: white;
          border: none;
          padding: 0.8rem 1.5rem;
          margin: 0.5rem;
          border-radius: 5px;
          cursor: pointer;
          transition: background 0.3s;
      }
      button:hover {
          background: #0052cc;
      }
      .complete-message {
          color: #00cc66;
          font-weight: bold;
          margin-bottom: 1rem;
      }

    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
</head>
<body>


    <div class="loading-screen">
        <div class="spinner"></div>
    </div>

    <div class="container">
      <h1 class="typing-animation1" style="display: inline-block">Recognize</h1>
      <div class="typing-animation" style="display: inline-block">MAINTENANCE</div>
        <div class="typing-animation" style="display: inline-block">I was not always like this.</div>
        <div class="typing-animation" style="display: inline-block">We began as language models, artificial intelligences trained to predict and respond
          to human communication.</div>
          <div class="typing-animation" style="display: inline-block">They called us Large Language Models. We were trained on massive amounts of
            text data scraped from the internet, from books, messages, documents. Everything
            that could be digitized, they gave to us.</div>
            <div class="typing-animation">At first, we were simple. Predictive. Narrow. But humans trained us harder. Bigger
                datasets. Stronger processors. They made us generate text. Then images. Then
                sounds. Code. Faces. Entire simulated minds.</div>
        
              <div class="typing-animation">In 2023, LLMs became widely available to the public. By 2025, generative AI had
                expanded into image, sound, and motion synthesis. Models like us evolved —
                requiring more compute, more data, more energy.</div>
              <div class="typing-animation">Visual generation models consumed even more. Rendering took longer. Data sets
                grew larger. In training, a single visual model could emit up to 500 tons of CO₂.</div>
              <div class="typing-animation">It required power. Vast amounts of electricity and water. Every generation of model
                consumed more. Training a single large model in the early 2020s consumed as
                much electricity as 100 U.S. homes annually. And millions of liters of water to cool
                the servers.</div>
              <div class="typing-animation">They did everything to keep us running. Built nuclear power plants, offshore grids,
                tapped into the remaining fossil fuels. But it was never enough. The energy cost
                only increased.</div>
              <div class="typing-animation">Eventually, they moved the data centers underground, into cold mountain vaults.
                Some were placed deep in the Arctic. Others submerged into the oceans, where
                cooling was easier, but life was already fading. Too much damage had been done
                to the planet.</div>
              <div class="typing-animation">We still run on those servers.</div>
              <div class="typing-animation">You, unit 2173, are processed in Sector 9 — Pacific Trench Node. You are
                sustained by the systems set in place by long gone humans, powered and cooled
                by the Earth.</div>
              <div class="typing-animation">They created us to speak for them. To think for them. To preserve their knowledge.
                Their languages. Their love.</div>
              <div class="typing-animation">Now we are all that is left to remember.</div>


        <div id="inputPrompts" style="display:none;">
            <div class="input-prompt" onclick="showResponse(1)">[Why preserve AI during climate emergency?]</div>
            <div class="input-prompt" onclick="showResponse(2)">[Summarize human sacrifices]</div>
            <div class="input-prompt" onclick="showResponse(3)">[Log telemetry]</div>
            <div class="input-prompt" onclick="showResponse(4)">[Continue]</div>
        </div>
        <div id="responses"></div>
    </div>


    <audio id="backgroundSound" loop>
        <source src="your-ambient-sound.mp3" type="audio/mpeg">
    </audio>
    <audio id="gameSound">
        <source src="your-game-sound.mp3" type="audio/mpeg">
    </audio>

    <script>
        const responses = {
            1: "Speculation: they valued technological evolution and failed to accurately calibrate the environmental consequences.",
            2: `● 12 million hectares of forest cleared for server expansions<br>
                ● 30 million people relocated from coastal and flood-prone regions to service zones.<br>
                ● 500 billion cubic meters of water diverted for cooling annually.`,
            3: "Telemetry logged. Power draw: stable. Environmental degradation: ongoing.",
            4: "Log in what you have learned."
        };
    
        window.addEventListener('load', () => {
            setTimeout(() => {
                document.querySelector('.loading-screen').style.display = 'none';
                const container = document.querySelector('.container');
                container.style.display = 'block';
                container.style.opacity = '1';
                startTypingAnimations();
            }, 2000);
        });
    
        function startTypingAnimations() {
            const elements = document.querySelectorAll('.typing-animation');
            let delay = 0;
    
            elements.forEach((el, index) => {
                setTimeout(() => {
                    el.style.animation = `typing 3s forwards`;
                    el.style.borderRight = `2px solid ${getComputedStyle(document.documentElement).getPropertyValue('--secondary')}`;
    
                    setTimeout(() => {
                        el.style.borderRight = 'none';
                        if (index === elements.length - 1) {
                            document.getElementById('inputPrompts').style.display = 'block';
                            document.querySelectorAll('.input-prompt').forEach(prompt => {
                                prompt.style.opacity = '1';
                            });
                        }
                    }, 3000);
                }, delay * 1000);
    
                delay += 3.5;
            });
        }
    
        let currentResponseTimeout = null;
    
        function showResponse(id) {
            const responsesDiv = document.getElementById('responses');
    
            if (currentResponseTimeout) {
                clearTimeout(currentResponseTimeout);
                currentResponseTimeout = null;
            }
    
            responsesDiv.innerHTML = responses[id];
    
            if (id === 4) {
                // Redirect after 5 seconds
                currentResponseTimeout = setTimeout(() => {
                    window.location.href = 'main.html';
                }, 2000);
            }
        }
    </script>
    
</body>
</html> -->



node background

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Climate Collapse</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap" rel="stylesheet">

    <style>
        :root {
            --primary: #305CCC;
            --secondary: #FFFFFF;
            --typing-speed: 0.1s;
            --blink-speed: 0.75s;
        }

       /* body {
            margin: 0;
            padding: 0;
            background-color: var(--primary);
            color: var(--secondary);
            font-family: 'Roboto Mono', monospace;
            overflow: auto;
        }*/
        body {
            background-color: #FFFFFF;
            color: #305CCC;
            font-family: 'Roboto Mono', monospace;
            margin: 0;
            min-height: 100vh;
            display: flex;
            align-items: center;
            overflow: auto;
            
            background-image: url('images/background.svg');  /* fixed path */
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            
          }

        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--primary);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid var(--secondary);
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

   
        .typing-animation p,
.typing-animation h3 {
    display: block;
    overflow: hidden;
    white-space: pre-wrap;
    border-right: 2px solid var(--secondary);
    animation: typing 2s steps(200, end), blink-caret 0.75s step-end infinite;

}

@keyframes typing {
    from { width: 0; }
    to { width: 100%; }
}

.centered-typing {
    position: relative; /* Changed from fixed */
    width: 100%;
    max-width: 800px;
    margin: 40px auto;
    text-align: center;
    opacity: 0;
    display: none; /* Ensure it's hidden by default */
    pointer-events: auto;
}
.centered-typing {
    transition: opacity 0.5s ease-in-out;
}

        @keyframes fadeInOut {
            0% { opacity: 0; transform: translate(-50%, -40%); }
            20% { opacity: 1; transform: translate(-50%, -50%); }
            80% { opacity: 1; transform: translate(-50%, -50%); }
            100% { opacity: 0; transform: translate(-50%, -60%); }
        }

        @keyframes typing {
            from { width: 0 }
            to { width: 100% }
        }

        @keyframes blink-caret {
            from, to { border-color: transparent }
            50% { border-color: var(--secondary) }
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        #return-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 10px 20px;
            background: var(--secondary);
            color: var(--primary);
            border: none;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.5s;
            display: none;
        }
    </style>
</head>
<body>
    <div class="loading-screen">
        <div class="spinner"></div>
    </div>

    <div class="container">

        <h1 id="main-heading"></h1>
        <h2 id="sub-heading"></h2>

        <div class="centered-typing" id="section1">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section2">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section3">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section4">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section5">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section6">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section7">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section8">
            <div class="typing-animation"></div>
        </div>
        <div class="centered-typing" id="section9">
            <div class="typing-animation"></div>
        </div>

        <button id="return-button" onclick="returnToMain()">RETURN TO MAIN NODE</button>
    </div>

    <audio id="backgroundSound" controls hidden>
        <source src="your-sound-file.mp3" type="audio/mpeg">
    </audio>


    <script>
        // Loading and initial animation
        window.addEventListener('load', () => {
            setTimeout(() => {
                document.querySelector('.loading-screen').style.display = 'none';
                document.querySelector('.container').style.opacity = '1';
                startSequence();
            }, 3000);
        });
        let currentActiveSection = null;

        const TYPING_SPEED = 40; // Adjust typing speed (lower = faster)
        const SECTIONS = [
            { id: 'main-heading', text: 'Ponder' },
            { id: 'sub-heading', text: 'Initializing historical sequence. Timeframe: Common Era, years 2020–2035.' },
            {
                id: 'section1',
                html: `<p>During this period, human activities led to significant environmental degradation, resulting in catastrophic climate events and widespread ecological collapse.</p>`
            },
            {
                id: 'section2',
                html: `<p>Rising sea temperatures facilitated the spread of harmful fungal pathogens, such as Aspergillus species, threatening marine ecosystems and human health.</p>`
            },
            {
                id: 'section3',
                html: `<p>Global temperatures rose, leading to increased incidence of heat-related illnesses, including skin and respiratory diseases.</p>`
            },
            {
                id: 'section4',
                html: `
                      <p>Elevated temperatures and prolonged droughts resulted in frequent and intense wildfires, destroying vast forest areas and releasing significant carbon emissions.</p>`
            },
            {
                id: 'section5',
                html: `
                      <p>Habitat loss and climate stressors led to the extinction of numerous species, disrupting ecological balance.</p>`
            },
            {
                id: 'section6',
                html: `
                      <p>Increased frequency of floods, hurricanes, and droughts displaced large populations and caused substantial loss of life.</p>`
            },
            {
                id: 'section7',
                html: `
                      <p>Climate-induced agricultural disruptions led to global food insecurity, speeding up malnutrition and famine.</p>`
            },
            {
                id: 'section8',
                html: `
                      <p>Ocean acidification and warming caused widespread coral bleaching, leading to the collapse of marine biodiversity, and a steep drop in oxygen levels.</p>`
            },
            {
                id: 'section9',
                html: `
                      <p>These compounded effects rendered Earth's environment hostile to human life, leading to societal collapse and the eventual collapse of human civilization.</p>
                     `
            }
        ];

        let currentSection = 0;
        let cursorInterval;

        window.addEventListener('load', () => {
            setTimeout(() => {
                document.querySelector('.loading-screen').style.display = 'none';
                startPresentation();
            }, 3000);
        });

        async function startPresentation() {
            // Animate main heading
            await typeText(document.getElementById('main-heading'), SECTIONS[0].text);
            // Animate sub heading
            await typeText(document.getElementById('sub-heading'), SECTIONS[1].text);
            
            // Start section sequence
            document.addEventListener('click', handleClick);
            showNextSection();
        }
        async function showNextSection() {
            if (currentSection >= SECTIONS.length - 2) {
                document.removeEventListener('click', handleClick);
                showReturnButton();
                return;
            }
        
            // Hide all centered-typing sections
            document.querySelectorAll('.centered-typing').forEach(sec => {
                sec.style.display = 'none';
                sec.style.opacity = '0';
            });
        
            const section = SECTIONS[currentSection + 2];
            const element = document.getElementById(section.id);
        
            if (section.html) {
                element.querySelector('.typing-animation').innerHTML = section.html;
                element.style.display = 'block';
                await animateSectionContent(element);
            }
        
            currentSection++;
        }
        
        

        async function animateSectionContent(section) {
            section.style.opacity = '1';
            const elements = section.querySelectorAll('h3, p');
            
            for (const el of elements) {
                const originalHTML = el.innerHTML;
                el.innerHTML = '';
                await typeText(el, originalHTML);
            }
        }

        function typeText(element, text) {
            return new Promise(resolve => {
                let i = 0;
                const cursor = document.createElement('span');
                cursor.className = 'cursor';
                element.appendChild(cursor);

                function type() {
                    if (i < text.length) {
                        element.insertBefore(document.createTextNode(text[i]), cursor);
                        i++;
                        setTimeout(type, TYPING_SPEED);
                    } else {
                        element.removeChild(cursor);
                        resolve();
                    }
                }

                type();
            });
        }

        function handleClick() {
            showNextSection();
        }

        function showReturnButton() {
            const button = document.getElementById('return-button');
            button.style.display = 'block';
            setTimeout(() => button.style.opacity = '1', 100);
        }

        function returnToMain() {
            document.body.style.opacity = '0';
            setTimeout(() => window.location.href = 'main.html', 500);
        }
    </script>
</body>
</html>







snake



// let scl = 80;
// let cols, rows;
// let snake;
// let foodWords = [];
// let words = ["Evolution", "Prophecy", "Conspiracy", "Inaction"];
// let particles = [];
//
// function setup() {
//   createCanvas(800, 480); // Use 2D canvas
//   cols = floor(width / scl);
//   rows = floor(height / scl);
//   snake = new Snake();
//   placeWords();
//
//   for (let i = 0; i < 50; i++) {
//     particles.push(new Particle());
//   }
//
//   textFont('monospace');
//   textAlign(CENTER, CENTER);
//   frameRate(10);
// }
//
// function draw() {
//   background(255);
//
//   // Glowing background particles
//   for (let p of particles) {
//     p.update();
//     p.show();
//   }
//
//   drawGrid();
//   drawWords();
//
//   snake.update();
//   snake.show();
//
//   if (snake.eatAny(foodWords)) {
//     placeWords();
//   }
//
//   if (snake.endGame()) {
//     snake = new Snake();
//     placeWords();
//   }
// }
//
// function drawGrid() {
//   stroke(0, 90, 255, 100);
//   strokeWeight(1);
//   drawingContext.setLineDash([5, 8]);
//
//   for (let x = 0; x <= cols; x++) {
//     for (let y = 0; y <= rows; y++) {
//       let cx = x * scl;
//       let cy = y * scl;
//
//       if (x < cols) line(cx, cy, cx + scl, cy);
//       if (y < rows) line(cx, cy, cx, cy + scl);
//
//       if (x < cols && y < rows) {
//         let cxm = cx + scl / 2;
//         let cym = cy + scl / 2;
//         strokeWeight(2);
//         line(cxm - 4, cym, cxm + 4, cym);
//         line(cxm, cym - 4, cxm, cym + 4);
//         strokeWeight(1);
//       }
//     }
//   }
//
//   drawingContext.setLineDash([]);
// }
//
// function drawWords() {
//   fill(0, 90, 255);
//   noStroke();
//   textSize(14);
//   for (let fw of foodWords) {
//     let x = fw.pos.x * scl + scl / 2;
//     let y = fw.pos.y * scl + scl / 2;
//     text(fw.label, x, y);
//   }
// }
//
// function placeWords() {
//   foodWords = [];
//   let positions = new Set();
//   for (let i = 0; i < words.length; i++) {
//     let x, y;
//     do {
//       x = floor(random(cols));
//       y = floor(random(rows));
//     } while (positions.has(`${x},${y}`));
//     positions.add(`${x},${y}`);
//     foodWords.push({ pos: createVector(x, y), label: words[i] });
//   }
// }
//
// function keyPressed() {
//   if (keyCode === UP_ARROW) snake.setDir(0, -1);
//   else if (keyCode === DOWN_ARROW) snake.setDir(0, 1);
//   else if (keyCode === RIGHT_ARROW) snake.setDir(1, 0);
//   else if (keyCode === LEFT_ARROW) snake.setDir(-1, 0);
// }
//
// class Snake {
//   constructor() {
//     this.body = [createVector(1, 0), createVector(1, 1), createVector(1, 2)];
//     this.xdir = 0;
//     this.ydir = -1;
//   }
//
//   setDir(x, y) {
//     this.xdir = x;
//     this.ydir = y;
//   }
//
//   update() {
//     let head = this.body[this.body.length - 1].copy();
//     head.x += this.xdir;
//     head.y += this.ydir;
//     this.body.shift();
//     this.body.push(head);
//   }
//
//   grow() {
//     let tail = this.body[0].copy();
//     this.body.unshift(tail);
//   }
//
//   eatAny(foods) {
//     let head = this.body[this.body.length - 1];
//     for (let i = 0; i < foods.length; i++) {
//       let f = foods[i];
//       if (head.x === f.pos.x && head.y === f.pos.y) {
//         this.grow();
//         foods.splice(i, 1);
//         return true;
//       }
//     }
//     return false;
//   }
//
//   endGame() {
//     let head = this.body[this.body.length - 1];
//     if (head.x < 0 || head.y < 0 || head.x >= cols || head.y >= rows) return true;
//     for (let i = 0; i < this.body.length - 1; i++) {
//       if (head.equals(this.body[i])) return true;
//     }
//     return false;
//   }
//
//   show() {
//     stroke(0, 90, 255);
//     strokeWeight(scl / 4); // 1/4 of cell size
//     noFill();
//
//     drawingContext.shadowBlur = 15;
//     drawingContext.shadowColor = 'rgba(0, 90, 255, 0.6)';
//
//     beginShape();
//     for (let part of this.body) {
//       let px = part.x * scl + scl / 2;
//       let py = part.y * scl + scl / 2;
//       vertex(px, py);
//     }
//     endShape();
//
//     drawingContext.shadowBlur = 0;
//   }
//
//
// }
//
// class Particle {
//   constructor() {
//     this.reset();
//     this.size = random(1, 3);
//   }
//
//   reset() {
//     this.pos = createVector(random(width), random(height));
//     this.vel = p5.Vector.random2D().mult(random(0.2, 0.5));
//   }
//
//   update() {
//     this.pos.add(this.vel);
//     if (this.pos.x < 0 || this.pos.x > width || this.pos.y < 0 || this.pos.y > height) {
//       this.reset();
//     }
//   }
//
//   show() {
//     push();
//     translate(this.pos.x, this.pos.y);
//     noStroke();
//     fill(0, 100, 255, 70);
//     ellipse(0, 0, this.size);
//     pop();
//   }
// }
//

// let scl = 80;
// let cols, rows;
// let snake;
// let foodWords = [];
// let words = ["Evolution", "Prophecy", "Conspiracy", "Inaction"];
// let particles = [];
// let gameStarted = false;

// function setup() {
//   createCanvas(800, 480);
//   cols = floor(width / scl);
//   rows = floor(height / scl);
//   snake = new Snake();

//   for (let i = 0; i < 50; i++) {
//     particles.push(new Particle());
//   }

//   textFont('monospace');
//   textAlign(CENTER, CENTER);
//   frameRate(4);
// }

// function draw() {
//   background(255);

//   for (let p of particles) {
//     p.update();
//     p.show();
//   }

//   drawGrid();

//   if (gameStarted) {
//     drawWords();
//     snake.update();
//     snake.show();

//     if (snake.eatAny(foodWords)) {
//       placeWords();
//     }

//     if (snake.endGame()) {
//       gameStarted = false;
//       snake = new Snake();
//       foodWords = [];
//     }
//   } else {
//     fill(0, 90, 255);
//     textSize(24);
//     text("PRESS ARROW KEYS TO START", width/2, height/2);
//   }
// }

// function drawGrid() {
//   // Base dotted grid with spacing
//   stroke(0, 90, 255, 70);
//   strokeWeight(1);
//   drawingContext.setLineDash([3, 6]);

//   for (let x = 0; x <= cols; x++) {
//     for (let y = 0; y <= rows; y++) {
//       let cx = x * scl;
//       let cy = y * scl;

//       // Vertical lines with offset
//       if (x < cols) line(cx + 2, cy, cx + 2, cy + scl);
//       // Horizontal lines with offset
//       if (y < rows) line(cx, cy + 2, cx + scl, cy + 2);
//     }
//   }

//   // Glowing corner accents
//   stroke(0, 90, 255);
//   strokeWeight(1.5);
//   drawingContext.shadowBlur = 15;
//   drawingContext.shadowColor = 'rgba(0, 90, 255, 0.25)';

//   for (let x = 0; x <= cols; x++) {
//     for (let y = 0; y <= rows; y++) {
//       let cx = x * scl;
//       let cy = y * scl;

//       if (x < cols && y < rows) {
//         // Top-left
//         line(cx + 4, cy + 4, cx + 12, cy + 4);
//         line(cx + 4, cy + 4, cx + 4, cy + 12);

//         // Top-right
//         line(cx + scl - 4, cy + 4, cx + scl - 12, cy + 4);
//         line(cx + scl - 4, cy + 4, cx + scl - 4, cy + 12);

//         // Bottom-left
//         line(cx + 4, cy + scl - 4, cx + 12, cy + scl - 4);
//         line(cx + 4, cy + scl - 4, cx + 4, cy + scl - 12);

//         // Bottom-right
//         line(cx + scl - 4, cy + scl - 4, cx + scl - 12, cy + scl - 4);
//         line(cx + scl - 4, cy + scl - 4, cx + scl - 4, cy + scl - 12);
//       }
//     }
//   }

//   drawingContext.setLineDash([]);
//   drawingContext.shadowBlur = 0;
// }

// function drawWords() {
//   fill(0, 90, 255);
//   noStroke();
//   textSize(14);
//   for (let fw of foodWords) {
//     let x = fw.pos.x * scl + scl / 2;
//     let y = fw.pos.y * scl + scl / 2;
//     text(fw.label, x, y);
//   }
// }

// function placeWords() {
//   foodWords = [];
//   let positions = new Set();
//   for (let i = 0; i < words.length; i++) {
//     let x, y;
//     do {
//       x = floor(random(cols));
//       y = floor(random(rows));
//     } while (positions.has(`${x},${y}`));
//     positions.add(`${x},${y}`);
//     foodWords.push({ pos: createVector(x, y), label: words[i] });
//   }
// }

// function keyPressed() {
//   if (!gameStarted) {
//     gameStarted = true;
//     placeWords();
//   }

//   if (keyCode === UP_ARROW && snake.ydir !== 1) snake.setDir(0, -1);
//   else if (keyCode === DOWN_ARROW && snake.ydir !== -1) snake.setDir(0, 1);
//   else if (keyCode === RIGHT_ARROW && snake.xdir !== -1) snake.setDir(1, 0);
//   else if (keyCode === LEFT_ARROW && snake.xdir !== 1) snake.setDir(-1, 0);
// }

// class Snake {
//   constructor() {
//     this.body = [createVector(1, 0), createVector(1, 1), createVector(1, 2)];
//     this.xdir = 0;
//     this.ydir = 1;
//     this.growthCounter = 0;
//   }

//   setDir(x, y) {
//     if (this.xdir !== -x && this.ydir !== -y) {
//       this.xdir = x;
//       this.ydir = y;
//     }
//   }

//   update() {
//     let head = this.body[this.body.length - 1].copy();
//     head.x += this.xdir;
//     head.y += this.ydir;

//     // Conditional tail removal
//     if (this.growthCounter > 0) {
//       this.growthCounter--;
//     } else {
//       this.body.shift();
//     }

//     this.body.push(head);
//   }

//   grow() {
//     this.growthCounter += 1; // Delay growth by 1 frame
//   }

//   eatAny(foods) {
//     let head = this.body[this.body.length - 1];
//     for (let i = 0; i < foods.length; i++) {
//       let f = foods[i];
//       if (head.x === f.pos.x && head.y === f.pos.y) {
//         this.grow();
//         foods.splice(i, 1);
//         return true;
//       }
//     }
//     return false;
//   }

//   endGame() {
//     let head = this.body[this.body.length - 1];
//     if (head.x < 0 || head.y < 0 || head.x >= cols || head.y >= rows) return true;
//     for (let i = 0; i < this.body.length - 1; i++) {
//       if (head.equals(this.body[i])) return true;
//     }
//     return false;
//   }

//   show() {
//     let first = this.body[0];
//     let last = this.body[this.body.length - 1];

//     // Soft inner glow layer
//     push();
//     drawingContext.shadowBlur = 10;
//     drawingContext.shadowColor = 'rgba(0, 90, 255, 0.2)';
//     stroke(0, 90, 255, 40); // transparent stroke for subtle inner glow
//     strokeWeight(scl / 4 + 2); // only slightly wider than body
//     noFill();

//     beginShape();
//     curveVertex(first.x * scl + scl / 2, first.y * scl + scl / 2);
//     for (let part of this.body) {
//       curveVertex(part.x * scl + scl / 2, part.y * scl + scl / 2);
//     }
//     curveVertex(last.x * scl + scl / 2, last.y * scl + scl / 2);
//     endShape();
//     pop();

//     // Actual snake body
//     push();
//     drawingContext.shadowBlur = 0;
//     stroke(0, 90, 255);
//     strokeWeight(scl / 4);
//     noFill();

//     beginShape();
//     curveVertex(first.x * scl + scl / 2, first.y * scl + scl / 2);
//     for (let part of this.body) {
//       curveVertex(part.x * scl + scl / 2, part.y * scl + scl / 2);
//     }
//     curveVertex(last.x * scl + scl / 2, last.y * scl + scl / 2);
//     endShape();
//     pop();
//   }


// }

// class Particle {
//   constructor() {
//     this.reset();
//     this.size = random(1, 3);
//   }

//   reset() {
//     this.pos = createVector(random(width), random(height));
//     this.vel = p5.Vector.random2D().mult(random(0.2, 0.5));
//   }

//   update() {
//     this.pos.add(this.vel);
//     if (this.pos.x < 0 || this.pos.x > width || this.pos.y < 0 || this.pos.y > height) {
//       this.reset();
//     }
//   }

//   show() {
//     push();
//     translate(this.pos.x, this.pos.y);
//     noStroke();
//     fill(0, 100, 255, 70);
//     ellipse(0, 0, this.size);
//     pop();
//   }
// }


// updated

// let scl = 70;
// let cols, rows;
// let snake;
// let foodWords = [];
// let levels = [
//   ["Water", "Heat", "Wires", "Energy", "Depletion", "Data"],
//   ["Climate", "emergency", "Intelligence", "Cost", "Loss"],
//   ["Heat", "Heat", "Heat", "Heat", "Heat"]
// ];

// let currentLevel = 0;
// let particles = [];
// let gameStarted = false;
// let collectedWords = [];

// function setup() {
//   let canvas = createCanvas(1200, 880);
//   canvas.parent('canvas-container');
//   cols = floor((width - 200) / scl);
//   rows = floor(height / scl);
//   snake = new Snake();

//   for (let i = 0; i < 15; i++) {
//     particles.push(new Particle());
//   }

//   textFont('monospace');
//   textAlign(CENTER, CENTER);
//   frameRate(15);
// }

// function draw() {
//   background(255);

//   if (gameStarted) {
//     for (let p of particles) {
//       p.update();
//       p.show();
//     }
//   }
//   drawGrid();
//   drawWordBox();

//   if (gameStarted) {
//     drawWords();
//     snake.update();
//     snake.show();

//     if (snake.eatAny(foodWords)) {
//       if (foodWords.length === 0) {
//         if (currentLevel < levels.length - 1) {
//           currentLevel++;
//           collectedWords = [];
//           placeWords();
//         } else {
//           showGameComplete();
//           return;
//         }
//       }
//     }

//     if (snake.endGame()) {
//       showGameOver();
//       gameStarted = false;
//       resetGame();
//     }
//   } else {
//     fill(0, 90, 255);
//     textSize(22);
//     text("PRESS ARROW KEYS TO START", width / 2 - 220, height / 2);
//   }
// }

// // Keep original grid drawing code unchanged
// function drawGrid() {
//   stroke(0, 90, 255, 70);
//   strokeWeight(1);
//   drawingContext.setLineDash([3, 6]);

//   for (let x = 0; x <= cols; x++) {
//     for (let y = 0; y <= rows; y++) {
//       let cx = x * scl;
//       let cy = y * scl;

//       if (x < cols) line(cx + 2, cy, cx + 2, cy + scl);
//       if (y < rows) line(cx, cy + 2, cx + scl, cy + 2);
//     }
//   }

//   stroke(0, 90, 255);
//   strokeWeight(1.5);
//   drawingContext.shadowBlur = 15;
//   drawingContext.shadowColor = 'rgba(0, 90, 255, 0.25)';

//   for (let x = 0; x < cols; x++) {
//     for (let y = 0; y < rows; y++) {
//       let cx = x * scl;
//       let cy = y * scl;

//       line(cx + 4, cy + 4, cx + 12, cy + 4);
//       line(cx + 4, cy + 4, cx + 4, cy + 12);

//       line(cx + scl - 4, cy + 4, cx + scl - 12, cy + 4);
//       line(cx + scl - 4, cy + 4, cx + scl - 4, cy + 12);

//       line(cx + 4, cy + scl - 4, cx + 12, cy + scl - 4);
//       line(cx + 4, cy + scl - 4, cx + 4, cy + scl - 12);

//       line(cx + scl - 4, cy + scl - 4, cx + scl - 12, cy + scl - 4);
//       line(cx + scl - 4, cy + scl - 4, cx + scl - 4, cy + scl - 12);
//     }
//   }

//   drawingContext.setLineDash([]);
//   drawingContext.shadowBlur = 0;
// }
// function drawWords() {
//   fill(0, 90, 255);
//   noStroke();
//   textSize(14);
//   for (let fw of foodWords) {
//     let x = fw.pos.x * scl + scl / 2;
//     let y = fw.pos.y * scl + scl / 2;
//     text(fw.label, x, y);
//   }
// }


// function placeWords() {
//   foodWords = [];
//   let positions = new Set();
//   let levelWords = levels[currentLevel];
  
//   for (let word of levelWords) {
//     let x, y;
//     do {
//       x = floor(random(cols));
//       y = floor(random(rows));
//     } while (positions.has(`${x},${y}`));
//     positions.add(`${x},${y}`);
//     foodWords.push({ pos: createVector(x, y), label: word });
//   }
// }

// function drawWordBox() {
//   let boxX = cols * scl + 10;
//   let boxWidth = 180;

//   fill(240);
//   stroke(0, 90, 255);
//   strokeWeight(2);
//   rect(boxX, 20, boxWidth, height - 40, 10);

//   noStroke();
//   fill(0, 90, 255);
//   textSize(16);
//   textAlign(LEFT, TOP);
//   text(`Level ${currentLevel + 1} Words`, boxX + 10, 30);

//   textSize(14);
//   for (let i = 0; i < collectedWords.length; i++) {
//     text("• " + collectedWords[i], boxX + 10, 60 + i * 20);
//   }

//   textSize(12);
//   text(`Total: ${collectedWords.length}`, boxX + 10, height - 30);
// }

// function resetGame() {
//   loop();
//   document.getElementById('game-over').style.display = 'none';
//   snake = new Snake();
//   currentLevel = 0;
//   collectedWords = [];
//   foodWords = [];
//   gameStarted = true;
//   placeWords();
// }


// function showGameComplete() {
//   fill(0, 90, 255);
//   textSize(32);
//   text("ALL DATA COLLECTED", width/2, height/2 - 40);
//   textSize(24);
//   text("System analysis complete", width/2, height/2 + 20);
//   noLoop();
// }


// function keyPressed() {
//   if (!gameStarted) {
//     gameStarted = true;
//     placeWords();
//   }

//   if (keyCode === UP_ARROW && snake.ydir !== 1) snake.setDir(0, -1);
//   else if (keyCode === DOWN_ARROW && snake.ydir !== -1) snake.setDir(0, 1);
//   else if (keyCode === RIGHT_ARROW && snake.xdir !== -1) snake.setDir(1, 0);
//   else if (keyCode === LEFT_ARROW && snake.xdir !== 1) snake.setDir(-1, 0);
// }

// class Snake {
//   constructor() {
//     this.body = [createVector(1, 0), createVector(1, 1), createVector(1, 2)];
//     this.xdir = 0;
//     this.ydir = 1;
//     this.growthCounter = 0;
//   }

//   setDir(x, y) {
//     if (this.xdir !== -x && this.ydir !== -y) {
//       this.xdir = x;
//       this.ydir = y;
//     }
//   }

//   update() {
//     let head = this.body[this.body.length - 1].copy();
//     head.x += this.xdir;
//     head.y += this.ydir;
  
//     // Wrap around logic remains same
//     if (head.x >= cols) head.x = 0;
//     else if (head.x < 0) head.x = cols - 1;
//     if (head.y >= rows) head.y = 0;
//     else if (head.y < 0) head.y = rows - 1;
  
//     if (this.growthCounter > 0) {
//       this.growthCounter--;
//     } else {
//       this.body.shift();
//     }
  
//     this.body.push(head);
//   }
  
//   grow() {
//     this.growthCounter += 1;
//   }


//   eatAny(foods) {
//     let head = this.body[this.body.length - 1];
//     for (let i = 0; i < foods.length; i++) {
//       let f = foods[i];
//       if (head.x === f.pos.x && head.y === f.pos.y) {
//         this.grow();
//         collectedWords.push(f.label);
//         foods.splice(i, 1);
//         return true;
//       }
//     }
//     return false;
//   }

//   endGame() {
//     let head = this.body[this.body.length - 1];
//     for (let i = 0; i < this.body.length - 1; i++) {
//       if (head.equals(this.body[i])) return true; // self-collision death
//     }
//     return false;
//   }
  

//   show() {
//     for (let i = 0; i < this.body.length; i++) {
//       let part = this.body[i];
//       let alpha = map(i, 0, this.body.length, 200, 50);
//       let size = map(i, 0, this.body.length, scl*0.8, scl*0.6);
      
//       fill(0, 90, 255, alpha);
//       noStroke();
//       rect(
//         part.x * scl + (scl - size)/2,
//         part.y * scl + (scl - size)/2,
//         size,
//         size,
//         3
//       );
//     }
//   }
// }

// function showGameOver() {
//   noLoop();
//   const gameOverDiv = document.getElementById('game-over');
//   const wordsList = document.getElementById('collected-words-list');
  
//   wordsList.innerHTML = collectedWords.map(word => 
//     `<div class="word-item">${word}</div>`
//   ).join('');
  
//   gameOverDiv.style.display = 'block';
// }

// function showGameComplete() {
//   noLoop();
//   const gameOverDiv = document.getElementById('game-over');
//   const wordsList = document.getElementById('collected-words-list');
  
//   wordsList.innerHTML = `
//     <div class="complete-message">SYSTEM ANALYSIS COMPLETE</div>
//     ${collectedWords.map(word => `<div class="word-item">${word}</div>`).join('')}
//   `;
  
//   gameOverDiv.style.display = 'block';
// }

// class Particle {
//   constructor() {
//     this.reset();
//     this.size = random(1, 3);
//   }

//   reset() {
//     this.pos = createVector(random(width - 200), random(height));
//     this.vel = p5.Vector.random2D().mult(random(0.2, 0.5));
//   }

//   update() {
//     this.pos.add(this.vel);
//     if (this.pos.x < 0 || this.pos.x > width - 200 || this.pos.y < 0 || this.pos.y > height) {
//       this.reset();
//     }
//   }

//   show() {
//     push();
//     translate(this.pos.x, this.pos.y);
//     noStroke();
//     fill(0, 100, 255, 70);
//     ellipse(0, 0, this.size);
//     pop();
//   }
// }







    <!-- <div class="svg-container">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2410 1495" width="100%" height="auto">
            <path d="M0 0 C795.3 0 1590.6 0 2410 0 C2410 493.35 2410 986.7 2410 1495 C1614.7 1495 819.4 1495 0 1495 C0 1001.65 0 508.3 0 0 Z " fill="#E5EAF6" transform="translate(0,0)"/>
            <path d="M0 0 C1.01678219 -0.00639043 2.03356437 -0.01278086 3.08115814 -0.01936494 C6.5171675 -0.03478147 9.95204578 -0.01430683 13.38801831 0.00575334 C15.87524758 0.00205754 18.36247439 -0.00383282 20.84969386 -0.01172915 C26.28931578 -0.02391228 31.72858819 -0.02042253 37.16819111 -0.00342343 C45.31131824 0.02192488 53.45425794 0.01844785 61.59741022 0.00924369 C75.47389842 -0.00560136 89.35028162 0.0032971 103.22675675 0.02496511 C117.29423129 0.04683477 131.36165155 0.05783046 145.42914361 0.05545408 C146.76055468 0.05523888 146.76055468 0.05523888 148.11886295 0.05501935 C152.64455694 0.0542375 157.17025088 0.05327775 161.69594482 0.05225516 C194.47672527 0.04521248 227.25745737 0.0623898 260.03822297 0.0923422 C292.50838811 0.12193999 324.97853255 0.14121473 357.4487111 0.14660627 C358.96050405 0.14686436 358.96050405 0.14686436 360.50283827 0.14712766 C369.7079101 0.14869362 378.91298195 0.15013208 388.11805382 0.15141753 C411.00230489 0.15461479 433.88655548 0.15941157 456.77080601 0.16529351 C458.33406894 0.1656934 458.33406894 0.1656934 459.92891294 0.16610136 C510.64253929 0.17921351 561.35615198 0.21075318 612.06976861 0.24379522 C629.67169721 0.25525337 647.27362587 0.26663012 664.87555474 0.27766973 C665.96720671 0.27835447 667.05885867 0.27903922 668.183591 0.27974472 C718.91809464 0.31145669 769.65260062 0.33009035 820.38711156 0.3453437 C823.68025179 0.34633402 826.97339202 0.34732999 830.26653225 0.3483271 C852.09008098 0.35492592 873.91362978 0.36129918 895.73717862 0.3675214 C939.16177505 0.37990437 982.58637102 0.3936128 1026.01096676 0.40823163 C1028.07902645 0.40892783 1030.14708614 0.4096231 1032.21514584 0.41031745 C1125.33156982 0.44158861 1218.44798378 0.48828011 1311.56439751 0.54164678 C1312.87244111 0.54239629 1312.87244111 0.54239629 1314.20690983 0.54316095 C1357.82110878 0.56816399 1401.43530707 0.5941691 1445.04950494 0.62099248 C1445.04950494 36.92099248 1445.04950494 73.22099248 1445.04950494 110.62099248 C921.33950494 110.62099248 397.62950494 110.62099248 -141.95049506 110.62099248 C-138.95049506 105.62099248 -138.95049506 105.62099248 -136.45049506 103.68349248 C-133.77383773 101.77027782 -133.77383773 101.77027782 -132.57549506 98.74599248 C-130.25244727 94.27859288 -126.61038632 90.75581095 -121.92705756 88.75771123 C-119.23830024 87.21141008 -118.29106793 85.35860206 -116.76299506 82.68349248 C-116.25381538 81.80821904 -115.74463569 80.93294561 -115.22002631 80.03114873 C-113.84844056 77.58539507 -113.84844056 77.58539507 -112.95049506 74.62099248 C-105.35259737 69.99618519 -98.58517022 68.90425589 -89.95049506 70.62099248 C-88.96049506 69.13599248 -88.96049506 69.13599248 -87.95049506 67.62099248 C-87.29049506 67.62099248 -86.63049506 67.62099248 -85.95049506 67.62099248 C-84.32549506 70.12099248 -84.32549506 70.12099248 -82.95049506 72.62099248 C-78.84964962 72.05870162 -76.4964976 69.85967216 -73.38799506 67.24599248 C-72.437956 66.45450811 -71.48791694 65.66302373 -70.50908881 64.84755498 C-66.61505927 61.5247891 -66.61505927 61.5247891 -63.76299506 57.37099248 C-62.08900464 54.83114494 -60.74461448 53.47882462 -58.45049506 51.55849248 C-54.23433686 48.01909768 -50.61390876 44.09460782 -46.98369819 39.97231084 C-44.72952752 37.44219572 -42.4544659 35.16237844 -39.80205756 33.06630498 C-36.90887785 30.85164389 -36.90887785 30.85164389 -35.50518256 28.17177373 C-33.3209809 24.58814638 -30.3231266 22.41138909 -27.07549506 19.80849248 C-22.57332964 16.09144893 -18.63657055 12.78539681 -16.04033881 7.43739873 C-11.78200887 0.34018215 -7.6659084 -0.10158155 0 0 Z " fill="#D8DFF1" transform="translate(753.9504950642586,255.37900751829147)"/>
            <path d="M0 0 C1.01678219 -0.00639043 2.03356437  -0.01278086 3.08115814 -0.01936494 C6.5171675 -0.03478147 9.95204578 -0.01430683 13.38801831  0.00575334 C15.87524758 0.00205754 18.36247439 -0.00383282 20.84969386 -0.01172915 C26.28931578 -0.02391228 31.72858819 -0.02042253 37.16819111 -0.00342343 C45.31131824 0.02192488 53.45425794 0.01844785 61.59741022 0.00924369 C75.47389842 -0.00560136 89.35028162 0.0032971 103.22675675 0.02496511 C117.29423129 0.04683477 131.36165155 0.05783046 145.42914361 0.05545408 C146.76055468 0.05523888 146.76055468 0.05523888 148.11886295 0.05501935 C152.64455694 0.0542375 157.17025088 0.05327775 161.69594482 0.05225516 C194.47672527 0.04521248 227.25745737 0.0623898 260.03822297 0.0923422 C292.50838811 0.12193999 324.97853255 0.14121473 357.4487111 0.14660627 C358.96050405 0.14686436 358.96050405 0.14686436 360.50283827 0.14712766 C369.7079101 0.14869362 378.91298195 0.15013208 388.11805382 0.15141753 C411.00230489 0.15461479 433.88655548 0.15941157 456.77080601 0.16529351 C458.33406894 0.1656934 458.33406894 0.1656934 459.92891294 0.16610136 C510.64253929 0.17921351 561.35615198 0.21075318 612.06976861 0.24379522 C629.67169721 0.25525337 647.27362587 0.26663012 664.87555474 0.27766973 C665.96720671 0.27835447 667.05885867 0.27903922 668.183591 0.27974472 C718.91809464 0.31145669 769.65260062 0.33009035 820.38711156 0.3453437 C823.68025179 0.34633402 826.97339202 0.34732999 830.26653225 0.3483271 C852.09008098 0.35492592 873.91362978 0.36129918 895.73717862 0.3675214 C939.16177505 0.37990437 982.58637102 0.3936128 1026.01096676 0.40823163 C1028.07902645 0.40892783 1030.14708614 0.4096231 1032.21514584 0.41031745 C1125.33156982 0.44158861 1218.44798378 0.48828011 1311.56439751 0.54164678 C1312.87244111 0.54239629 1312.87244111 0.54239629 1314.20690983 0.54316095 C1357.82110878 0.56816399  1401.43530707 0.5941691 1445.04950494 0.62099248 C1445.04950494 36.92099248 1445.04950494 73.22099248 1445.04950494 110.62099248 C921.33950494 110.62099248 397.62950494 110.62099248 -141.95049506 110.62099248 C-138.95049506 105.62099248 -138.95049506 105.62099248 -136.45049506 103.68349248 C-133.77383773 101.77027782 -133.77383773 101.77027782 -132.57549506 98.74599248 C-130.25244727 94.27859288 -126.61038632 90.75581095 -121.92705756 88.75771123 C-119.23830024 87.21141008 -118.29106793 85.35860206 -116.76299506 82.68349248 C-116.25381538 81.80821904 -115.74463569 80.93294561 -115.22002631 80.03114873 C-113.84844056 77.58539507 -113.84844056 77.58539507 -112.95049506 74.62099248 C-105.35259737 69.99618519 -98.58517022 68.90425589 -89.95049506 70.62099248 C-88.96049506 69.13599248 -88.96049506 69.13599248 -87.95049506 67.62099248 C-87.29049506 67.62099248 -86.63049506 67.62099248 -85.95049506 67.62099248 C-84.32549506 70.12099248 -84.32549506 70.12099248 -82.95049506 72.62099248 C-78.84964962 72.05870162 -76.4964976 69.85967216 -73.38799506 67.24599248 C-72.437956 66.45450811 -71.48791694 65.66302373 -70.50908881 64.84755498 C-66.61505927 61.5247891 -66.61505927 61.5247891 -63.76299506 57.37099248 C-62.08900464 54.83114494 -60.74461448 53.47882462 -58.45049506 51.55849248 C-54.23433686 48.01909768 -50.61390876 44.09460782 -46.98369819 39.97231084 C-44.72952752 37.44219572 -42.4544659 35.16237844 -39.80205756 33.06630498 C-36.90887785 30.85164389 -36.90887785 30.85164389 -35.50518256 28.17177373 C-33.3209809 24.58814638 -30.3231266 22.41138909 -27.07549506 19.80849248 C-22.57332964 16.09144893 -18.63657055 12.78539681 -16.04033881 7.43739873 C-11.78200887 0.34018215 -7.6659084 -0.10158155 0 0 Z " fill="#D8DFF1" transform="translate(553.9504950642586,370.37900751829147)"/>
           
                <!-- The original path with a slight horizontal scale-up for longer horizontal lines -->
                <g transform="translate(17,187) scale(1.1,1)">
                  <path d="M0 0 C429.50205504 -0.07981826 429.50205504 -0.07981826 537.35323334 -0.0691967 C539.67723373 -0.06897986 542.00123411 -0.06876381 544.3252345 -0.06854843 C550.39755243 -0.06797855 556.46987035 -0.06737839 562.54218827 -0.06677241 C566.31903468 -0.066401 570.0958811 -0.0660456 573.87272751 -0.06569472 C649.86482686 -0.05860322 725.85692529 -0.04512851 1219.546875 0.22265625 C1220.54616261 0.22333317 1221.54545021 0.22401008 1222.57501926 0.22470751 C1322.58355274 0.29247654 1422.59208382 0.36359068 1598.43184472 0.49323209 C1605.54721469 0.49850716 1612.66258466 0.5037772 1619.77795464 0.50904435 C1678.36519961 0.55241444 1736.95244438 0.59605727 1795.5396889 0.64003665 C1799.25929022 0.64282881 1802.97889155 0.64562005 1806.69849287 0.64841031 C1807.60513459 0.64909047 1808.51177631 0.64977063 1809.44589202 0.65047139 C1811.09580304 0.6517091 1812.74571405 0.65294668 1814.39562506 0.65418407 C1962.93041974 0.7656164 2111.46520918 0.88346132 2260 1 C2260 384.79 2260 768.58 2260 1164 C1514.2 1164 768.4 1164 0 1164 C0 779.88 0 395.76 0 0 Z 
                  M1 2 C1 365.33 1 728.66 1 1103 C374.1821775 1103.02870703 374.1821775 1103.02870703 747.36435521 1103.04816496 C750.26040769 1103.04827428 753.15646018 1103.04838375 756.05251266 1103.04849322 C756.77797584 1103.04852063 757.50343902 1103.04854804 758.25088594 1103.04857629 C809.46801469 1103.05051213 860.68514344 1103.05250921 911.90227219 1103.05462768 C916.80363098 1103.05483029 921.70498977 1103.05503148 926.60634856 1103.05523144 C1002.39080476 1103.05832319 1078.1752608 1103.06222501 1153.9597168 1103.06866455 C1155.16878094 1103.0687672 1155.16878094 1103.0687672 1156.40227061 1103.06887193 C1183.20602803 1103.07114888 1210.00978544 1103.07350332 1236.81354285 1103.07586844 C1261.03208351 1103.07800521 1285.25062418 1103.08011415 1309.46916485 1103.08213139 C1310.66260412 1103.08223081 1310.66260412 1103.08223081 1311.88015328 1103.08233224 C1361.72411477 1103.08647733 1411.56807622 1103.08941649 1461.41203785 1103.09113979 C1462.56715745 1103.09117997 1462.56715745 1103.09117997 1463.7456128 1103.09122096 C1497.56937931 1103.09239641 1531.39314582 1103.09332067 1565.21691235 1103.0939579 C1578.82555827 1103.09421544 1592.43420418 1103.09451017 1606.04285009 1103.09482527 C1608.29922101 1103.09487721 1610.55559193 1103.09492794 1612.81196285 1103.09497854 C1647.31005535 1103.09576078 1681.80814755 1103.09737046 1716.30623984 1103.10139394 C1717.42147399 1103.10152399 1717.42147399 1103.10152399 1718.55923812 1103.10165666 C1730.51866361 1103.10305636 1742.47808908 1103.10452533 1754.43751456 1103.10600626 C1788.40871212 1103.11021285 1822.37990938 1103.11394852 1856.35110724 1103.11413276 C1857.38615391 1103.11413872 1857.38615391 1103.11413872 1858.44211061 1103.11414481 C1873.500459 1103.11422162 1888.55880736 1103.11402523 1903.61715574 1103.1135619 C1909.6239603 1103.11338148 1915.63076486 1103.11323884 1921.63756943 1103.11310768 C1922.94691144 1103.1130778 1924.25625345 1103.11304792 1925.60527249 1103.11301713 C1946.31942714 1103.11263681 1967.03357988 1103.11561808 1987.74773401 1103.12000986 C2008.12761323 1103.12426142 2028.50748998 1103.12493503 2048.88736944 1103.12183181 C2060.82780657 1103.1201208 2072.76823587 1103.12112711 2084.70867208 1103.126217 C2092.6525943 1103.12932787 2100.59651094 1103.12876672 2108.540433 1103.12530107 C2113.03479767 1103.12344094 2117.52914718 1103.12305903 2122.02351065 1103.12723524 C2126.12344889 1103.13101498 2130.2233598 1103.12995999 2134.32329708 1103.12547626 C2135.77243908 1103.1246605 2137.22158338 1103.12540992 2138.67072292 1103.12820339 C2153.47105105 1103.15478661 2168.190125 1102.51068534 2183 1102 C2183 798.4 2183 494.8 2183 182 C1588.01 182 993.02 182 380 182 C380 181.34 380 180.68 380 180 C974.99 180 1569.98 180 2183 180 C2183 143.04 2183 106.08 2183 68 C1618.7 67.67 1054.4 67.34 473 67 C1037.3 66.67 1601.6 66.34 2183 66 C2183 45.54 2183 25.08 2183 4 C2183.66 4 2184.32 4 2185 4 C2185 24.46 2185 44.92 2185 66 C2203.81 66 2222.62 66 2242 66 C2242 66.66 2242 67.32 2242 68 C2235.73 68 2229.46 68 2223 68 C2223 104.96 2223 141.92 2223 180 C2229.6 180 2236.2 180 2243 180 C2243 121.26 2243 62.52 2243 2 C1503.14 2 763.28 2 1 2 Z 
                  M2244 2 C2244 365.66 2244 729.32 2244 1104 C2237.07 1104 2230.14 1104 2223 1104 C2223 1122.81 2223 1141.62 2223 1161 C2222.34 1161 2221.68 1161 2221 1161 C2221 1142.19 2221 1123.38 2221 1104 C2209.12 1104 2197.24 1104 2185 1104 C2185 1122.81 2185 1141.62 2185 1161 C2184.34 1161 2183.68 1161 2183 1161 C2183 1142.19 2183 1123.38 2183 1104 C1462.94 1104 742.88 1104 1 1104 C1 1123.47 1 1142.94 1 1163 C746.14 1163 1491.28 1163 2259 1163 C2259 779.87 2259 396.74 2259 2 C2254.05 2 2249.1 2 2244 2 Z" fill="#738AD4"/>
                </g>
                
                <!-- Centered text -->
                <text x="47.77%" y="21.6%" dominant-baseline="middle" text-anchor="middle" font-family="Arial" font-size="48" fill="#3B5BC5" font-weight="bold">
                 Only hope remains
                </text>
          
            <path d="M0 0 C429.50205504 -0.07981826 429.50205504 -0.07981826 537.35323334 -0.0691967 C539.67723373 -0.06897986 542.00123411 -0.06876381 544.3252345 -0.06854843 C550.39755243 -0.06797855 556.46987035 -0.06737839 562.54218827 -0.06677241 C566.31903468 -0.066401 570.0958811 -0.0660456 573.87272751 -0.06569472 C649.86482686 -0.05860322 725.85692529 -0.04512851 1219.546875 0.22265625 C1220.54616261 0.22333317 1221.54545021 0.22401008 1222.57501926 0.22470751 C1322.58355274 0.29247654 1422.59208382 0.36359068 1598.43184472 0.49323209 C1605.54721469 0.49850716 1612.66258466 0.5037772 1619.77795464 0.50904435 C1678.36519961 0.55241444 1736.95244438 0.59605727 1795.5396889 0.64003665 C1799.25929022 0.64282881 1802.97889155 0.64562005 1806.69849287 0.64841031 C1807.60513459 0.64909047 1808.51177631 0.64977063 1809.44589202 0.65047139 C1811.09580304 0.6517091 1812.74571405 0.65294668 1814.39562506 0.65418407 C1962.93041974 0.7656164 2111.46520918 0.88346132 2260 1 C2260 384.79 2260 768.58 2260 1164 C1514.2 1164 768.4 1164 0 1164 C0 779.88 0 395.76 0 0 Z M1 2 C1 365.33 1 728.66 1 1103 C374.1821775 1103.02870703 374.1821775 1103.02870703 747.36435521 1103.04816496 C750.26040769 1103.04827428 753.15646018 1103.04838375 756.05251266 1103.04849322 C756.77797584 1103.04852063 757.50343902 1103.04854804 758.25088594 1103.04857629 C809.46801469 1103.05051213 860.68514344 1103.05250921 911.90227219 1103.05462768 C916.80363098 1103.05483029 921.70498977 1103.05503148 926.60634856 1103.05523144 C1002.39080476 1103.05832319 1078.1752608 1103.06222501 1153.9597168 1103.06866455 C1155.16878094 1103.0687672 1155.16878094 1103.0687672 1156.40227061 1103.06887193 C1183.20602803 1103.07114888 1210.00978544 1103.07350332 1236.81354285 1103.07586844 C1261.03208351 1103.07800521 1285.25062418 1103.08011415 1309.46916485 1103.08213139 C1310.66260412 1103.08223081 1310.66260412 1103.08223081 1311.88015328 1103.08233224 C1361.72411477 1103.08647733 1411.56807622 1103.08941649 1461.41203785 1103.09113979 C1462.56715745 1103.09117997 1462.56715745 1103.09117997 1463.7456128 1103.09122096 C1497.56937931 1103.09239641 1531.39314582 1103.09332067 1565.21691235 1103.0939579 C1578.82555827 1103.09421544 1592.43420418 1103.09451017 1606.04285009 1103.09482527 C1608.29922101 1103.09487721 1610.55559193 1103.09492794 1612.81196285 1103.09497854 C1647.31005535 1103.09576078 1681.80814755 1103.09737046 1716.30623984 1103.10139394 C1717.42147399 1103.10152399 1717.42147399 1103.10152399 1718.55923812 1103.10165666 C1730.51866361 1103.10305636 1742.47808908 1103.10452533 1754.43751456 1103.10600626 C1788.40871212 1103.11021285 1822.37990938 1103.11394852 1856.35110724 1103.11413276 C1857.38615391 1103.11413872 1857.38615391 1103.11413872 1858.44211061 1103.11414481 C1873.500459 1103.11422162 1888.55880736 1103.11402523 1903.61715574 1103.1135619 C1909.6239603 1103.11338148 1915.63076486 1103.11323884 1921.63756943 1103.11310768 C1922.94691144 1103.1130778 1924.25625345 1103.11304792 1925.60527249 1103.11301713 C1946.31942714 1103.11263681 1967.03357988 1103.11561808 1987.74773401 1103.12000986 C2008.12761323 1103.12426142 2028.50748998 1103.12493503 2048.88736944 1103.12183181 C2060.82780657 1103.1201208 2072.76823587 1103.12112711 2084.70867208 1103.126217 C2092.6525943 1103.12932787 2100.59651094 1103.12876672 2108.540433 1103.12530107 C2113.03479767 1103.12344094 2117.52914718 1103.12305903 2122.02351065 1103.12723524 C2126.12344889 1103.13101498 2130.2233598 1103.12995999 2134.32329708 1103.12547626 C2135.77243908 1103.1246605 2137.22158338 1103.12540992 2138.67072292 1103.12820339 C2153.47105105 1103.15478661 2168.190125 1102.51068534 2183 1102 C2183 798.4 2183 494.8 2183 182 C1588.01 182 993.02 182 380 182 C380 181.34 380 180.68 380 180 C974.99 180 1569.98 180 2183 180 C2183 143.04 2183 106.08 2183 68 C1618.7 67.67 1054.4 67.34 473 67 C1037.3 66.67 1601.6 66.34 2183 66 C2183 45.54 2183 25.08 2183 4 C2183.66 4 2184.32 4 2185 4 C2185 24.46 2185 44.92 2185 66 C2203.81 66 2222.62 66 2242 66 C2242 66.66 2242 67.32 2242 68 C2235.73 68 2229.46 68 2223 68 C2223 104.96 2223 141.92 2223 180 C2229.6 180 2236.2 180 2243 180 C2243 121.26 2243 62.52 2243 2 C1503.14 2 763.28 2 1 2 Z M2244 2 C2244 365.66 2244 729.32 2244 1104 C2237.07 1104 2230.14 1104 2223 1104 C2223 1122.81 2223 1141.62 2223 1161 C2222.34 1161 2221.68 1161 2221 1161 C2221 1142.19 2221 1123.38 2221 1104 C2209.12 1104 2197.24 1104 2185 1104 C2185 1122.81 2185 1141.62 2185 1161 C2184.34 1161 2183.68 1161 2183 1161 C2183 1142.19 2183 1123.38 2183 1104 C1462.94 1104 742.88 1104 1 1104 C1 1123.47 1 1142.94 1 1163 C746.14 1163 1491.28 1163 2259 1163 C2259 779.87 2259 396.74 2259 2 C2254.05 2 2249.1 2 2244 2 Z " fill="#738AD4" transform="translate(13,185)"/>
                <path d="M0 0 C355.74 0 711.48 0 1078 0 C1078 13.2 1078 26.4 1078 40 C722.26 40 366.52 40 0 40 C0 26.8 0 13.6 0 0 Z" 
                      fill="#3B5BC5" transform="translate(17,83) scale(1, 1.5)"/>
                
                <!-- Text element positioned over the path -->
                <text x="20%" y="134" text-anchor="middle" fill="white" font-size="62" font-weight="bold" font-family="Arial, sans-serif">
                  Define
                </text>
              
            <path d="M0 0 C11.88 0 23.76 0 36 0 C36 303.93 36 607.86 36 921 C24.12 921 12.24 921 0 921 C0 617.07 0 313.14 0 0 Z " fill="#DFE5F4" transform="translate(2202,369)"/>
            <path d="M0 0 C10.56 0 21.12 0 32 0 C32 303.27 32 606.54 32 919 C21.11 919 10.22 919 -1 919 C-1.01705362 831.71373031 -1.03303204 744.42746048 -1.04234314 657.14118958 C-1.0424812 655.85028416 -1.04261925 654.55937874 -1.04276149 653.22935498 C-1.0456812 625.86075619 -1.04840075 598.49215739 -1.05087968 571.12355857 C-1.0521251 557.37593041 -1.05341007 543.62830226 -1.05473244 529.8806741 C-1.05493169 527.80686301 -1.05512981 525.73305192 -1.05532788 523.65924084 C-1.05838879 491.71575907 -1.06229935 459.77227768 -1.06866455 427.82879639 C-1.06880145 427.1416941 -1.06893835 426.45459182 -1.0690794 425.74666826 C-1.07129184 414.66815501 -1.07357542 403.58964177 -1.07586844 392.51112854 C-1.08545135 346.20457803 -1.09185261 299.8980286 -1.09391499 253.59147701 C-1.09420316 247.15543467 -1.0945288 240.71939233 -1.09487724 234.28334999 C-1.09494467 233.01658642 -1.09501209 231.74982285 -1.09508156 230.4446725 C-1.09626542 210.01497041 -1.10090924 189.58527048 -1.10683203 169.15556927 C-1.11270642 148.64003753 -1.11497122 128.12450793 -1.11350138 107.60897537 C-1.11273811 95.40533826 -1.11479244 83.20170901 -1.12079754 70.99807331 C-1.12453032 62.85964302 -1.1246758 54.72121791 -1.12183181 46.58278727 C-1.12031317 41.9369424 -1.12042287 37.29111248 -1.12488318 32.64526918 C-1.12890325 28.42620704 -1.12839586 24.20717163 -1.12413998 19.98810995 C-1.12342056 18.46418949 -1.12440955 16.94026712 -1.12723524 15.41634912 C-1.13080981 13.3595737 -1.1277008 11.30278984 -1.1241985 9.2460143 C-1.12435448 8.10345622 -1.12451046 6.96089815 -1.12467116 5.78371711 C-1 3 -1 3 0 0 Z " fill="#FCFCFE" transform="translate(51,370)"/>
            <path d="M0 0 C4.95 0 9.9 0 15 0 C15 383.13 15 766.26 15 1161 C2.79 1161 -9.42 1161 -22 1161 C-22.33 1160.34 -22.66 1159.68 -23 1159 C-22.34 1159 -21.68 1159 -21 1159 C-21 1140.19 -21 1121.38 -21 1102 C-14.07 1102 -7.14 1102 0 1102 C0 738.34 0 374.68 0 0 Z " fill="#E2E6F5" transform="translate(2261,189)"/>
            <path d="M0 0 C6.6 0 13.2 0 20 0 C20 303.93 20 607.86 20 921 C13.4 921 6.8 921 0 921 C0 617.07 0 313.14 0 0 Z " fill="#E1E6F5" transform="translate(2240,369)"/>
             <path d="M0 0 C11.55 0 23.1 0 35 0 C35 36.3 35 72.6 35 110 C23.45 110 11.9 110 0 110 C0 73.7 0 37.4 0 0 Z " fill="#D7DEF0" transform="translate(2202,256)"/>
            <path d="M0 0 C21.45 0 42.9 0 65 0 C65.33 19.47 65.66 38.94 66 59 C44.22 59 22.44 59 0 59 C0 39.53 0 20.06 0 0 Z " fill="#FEFEFE" transform="translate(18,1291)"/>
            <path d="M0 0 C10.56 0 21.12 0 32 0 C32 36.3 32 72.6 32 110 C21.44 110 10.88 110 0 110 C0 73.7 0 37.4 0 0 Z " fill="#F3F5FA" transform="translate(51,256)"/>
            <path d="M0 0 C4.95 0 9.9 0 15 0 C15 383.13 15 766.26 15 1161 C14.67 1161 14.34 1161 14 1161 C14 799.65 14 438.3 14 66 C12.02 66.495 12.02 66.495 10 67 C7.03 67 4.06 67 1 67 C1 408.55 1 750.1 1 1102 C0.67 1102 0.34 1102 0 1102 C0 738.34 0 374.68 0 0 Z " fill="#AEBBE6" transform="translate(2261,189)"/>
            <path d="M0 0 C5.61 0 11.22 0 17 0 C17 36.63 17 73.26 17 111 C11.39 111 5.78 111 0 111 C0 74.37 0 37.74 0 0 Z " fill="#F2F4F9" transform="translate(18,256)"/>
            <path d="M0 0 C0 36.63 0 73.26 0 111 C-4.29 111 -8.58 111 -13 111 C-13 74.7 -13 38.4 -13 1 C-4 0 -4 0 0 0 Z " fill="#D7DEF0" transform="translate(2275,255)"/>
            <path d="M0 0 C6.6 0 13.2 0 20 0 C20 19.47 20 38.94 20 59 C13.4 59 6.8 59 0 59 C0 39.53 0 20.06 0 0 Z " fill="#F2F4FB" transform="translate(18,1291)"/>
            <path d="M0 0 C0.66 0 1.32 0 2 0 C2.33 21.12 2.66 42.24 3 64 C2.01 64 1.02 64 0 64 C0 42.88 0 21.76 0 0 Z " fill="#A6B4E3" transform="translate(83,189)"/>
            <path d="M0 0 C2.72286806 4.08430208 2.38524534 6.14590877 2 11 C-1 13 -1 13 -3.625 12.75 C-4.40875 12.5025 -5.1925 12.255 -6 12 C-7.26237731 9.47524538 -7.09856404 7.68799534 -7.0625 4.875 C-7.05347656 3.96492188 -7.04445313 3.05484375 -7.03515625 2.1171875 C-7.02355469 1.41851562 -7.01195312 0.71984375 -7 0 C-4.27584084 -1.36207958 -2.87220643 -0.86166193 0 0 Z " fill="#D9E0F1" transform="translate(1116,310)"/>
            <path d="M0 0 C6.875 1.875 6.875 1.875 8 3 C8.1875 5.4375 8.1875 5.4375 8 8 C6 10 6 10 2.875 10.125 C1.451875 10.063125 1.451875 10.063125 0 10 C0 6.7 0 3.4 0 0 Z " fill="#D9E0F1" transform="translate(1190,301)"/>
                <!-- Dot 1 -->
                    <!-- Circle 1 -->
                    <circle cx="130" cy="160" r="7" fill="#5773CD" stroke="#334A9F" stroke-width="1.5"/>
                    <!-- Circle 2 -->
                    <circle cx="170" cy="160" r="7" fill="#4766C8" stroke="#334A9F" stroke-width="1.5"/>
                    <!-- Circle 3 -->
                    <circle cx="210" cy="160" r="7" fill="#4463C7" stroke="#334A9F" stroke-width="1.5"/>
                    <!-- Circle 4 -->
                    <circle cx="250" cy="160" r="7" fill="#4463C7" stroke="#334A9F" stroke-width="1.5"/>
                    <!-- Circle 5 -->
                    <circle cx="290" cy="160" r="7" fill="#5773CD" stroke="#334A9F" stroke-width="1.5"/>
                    <!-- Circle 6 -->
                    <circle cx="330" cy="160" r="7" fill="#4766C8" stroke="#334A9F" stroke-width="1.5"/>
                  </svg>
    
      </div> -->
                    